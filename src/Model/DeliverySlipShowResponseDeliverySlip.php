<?php

/**
 * DeliverySlipShowResponseDeliverySlip.
 *
 * PHP version 7.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * freee請求書 API.
 *
 * <p>freee請求書のAPI仕様です。</p>  <b>freee請求書APIを利用するには、freee請求書への登録が必要です。  登録は<a href=\"https://www.freee.co.jp/invoice/\" target=\"_blank\">freee請求書</a>より行ってください。</b>  </br>  <h3 id=\"about_authorize\">認証について</h3>  <p>OAuth2.0を利用します。<a href=\"https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc\" target=\"_blank\">詳細はリファレンスの認証に関する記載を参照してください。</a></p>  <h3 id=\"api_endpoint\">エンドポイント</h3>  <p>https://api.freee.co.jp/iv</p>   <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"error_response\">エラーレスポンス</h3>  <p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>    <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ステータスコード</strong></th>       <th style=\"padding: 10px\"><strong>原因</strong></th>     </tr>     <tr><td style=\"padding: 10px\">400</td><td style=\"padding: 10px\">リクエストパラメータが不正</td></tr>     <tr><td style=\"padding: 10px\">401</td><td style=\"padding: 10px\">アクセストークンが無効</td></tr>     <tr><td style=\"padding: 10px\">403</td><td style=\"padding: 10px\">アクセス権限がない</td></tr>     <tr><td style=\"padding: 10px\">404</td><td style=\"padding: 10px\">リソースが存在しない</td></tr>     <tr><td style=\"padding: 10px\">429</td><td style=\"padding: 10px\">リクエスト回数制限を超えた</td></tr>     <tr><td style=\"padding: 10px\">503</td><td style=\"padding: 10px\">システム内で予期しないエラーが発生</td></tr>   </tbody> </table>  <p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p> <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;bad_request&quot;,         &quot;messages&quot; : [           &quot;リクエストの形式が不正です。&quot;         ]       }     ]   }  </code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3> <p>APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p> <pre><code>X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z </code></pre>  <br> 各ヘッダの意味は次のとおりです。</p>   <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ヘッダ名</strong></th>       <th style=\"padding: 10px\"><strong>説明</strong></th>     </tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Limit</td><td style=\"padding: 10px\">使用回数の上限</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Remaining</td><td style=\"padding: 10px\">残り使用回数</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Reset</td><td style=\"padding: 10px\">使用回数がリセットされる時刻</td></tr>   </tbody> </table>  <p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  </br>  <h3 id=\"accounting_master_items\">会計マスタ項目</h3>  <p>freee請求書APIのリクエストパラメータに、会計マスタ項目（例：<a href=\"https://developer.freee.co.jp/reference/iv/reference#operations-tag-Invoices\">POST/invoices請求書の作成</a> 取引先ID）があります。会計マスタ項目の詳細は<a href=\"https://developer.freee.co.jp/guideline/master-guideline\">会計マスタガイドラインを参照ください</a>。</p>  <p>会計のマスタ項目はfreee会計APIのエンドポイントにて取得可能です（例：<a href=\"https://developer.freee.co.jp/reference/accounting/reference#operations-tag-Partners\">Partners 取引先</a>）。freee会計APIのエンドポイントの詳細は<a href=\"https://developer.freee.co.jp/reference/accounting/reference\">会計APIリファレンスを参照ください</a>。</p>  </br>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace OpenAPI\Client\Model;

use ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * DeliverySlipShowResponseDeliverySlip Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DeliverySlipShowResponseDeliverySlip implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'DeliverySlipShowResponse_delivery_slip';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'id'                               => 'int',
        'company_id'                       => 'int',
        'delivery_slip_number'             => 'string',
        'branch_no'                        => 'int',
        'subject'                          => 'string',
        'template_id'                      => 'int',
        'template_name'                    => 'string',
        'delivery_slip_date'               => '\DateTime',
        'issue_date'                       => '\DateTime',
        'delivery_slip_note'               => 'string',
        'memo'                             => 'string',
        'sending_status'                   => 'string',
        'payment_status'                   => 'string',
        'cancel_status'                    => 'string',
        'deal_status'                      => 'string',
        'deal_id'                          => 'int',
        'tax_entry_method'                 => 'string',
        'tax_fraction'                     => 'string',
        'line_amount_fraction'             => 'string',
        'withholding_tax_entry_method'     => 'string',
        'total_amount'                     => 'double',
        'created_at'                       => '\DateTime',
        'amount_withholding_tax'           => 'float',
        'amount_including_tax'             => 'double',
        'amount_excluding_tax'             => 'float',
        'amount_tax'                       => 'float',
        'amount_including_tax_10'          => 'double',
        'amount_excluding_tax_10'          => 'double',
        'amount_tax_10'                    => 'double',
        'amount_including_tax_8'           => 'double',
        'amount_excluding_tax_8'           => 'double',
        'amount_tax_8'                     => 'double',
        'amount_including_tax_8_reduced'   => 'double',
        'amount_excluding_tax_8_reduced'   => 'double',
        'amount_tax_8_reduced'             => 'double',
        'amount_including_tax_0'           => 'double',
        'amount_excluding_tax_0'           => 'double',
        'amount_tax_0'                     => 'double',
        'partner_id'                       => 'int',
        'partner_code'                     => 'string',
        'partner_name'                     => 'string',
        'partner_title'                    => 'string',
        'partner_address_zipcode'          => 'string',
        'partner_address_prefecture_code'  => 'int',
        'partner_address_street_name1'     => 'string',
        'partner_address_street_name2'     => 'string',
        'partner_contact_department'       => 'string',
        'partner_contact_name'             => 'string',
        'partner_display_name'             => 'string',
        'company_contact_name'             => 'string',
        'company_name'                     => 'string',
        'company_description'              => 'string',
        'template'                         => '\OpenAPI\Client\Model\DeliverySlipResponseDeliverySlipTemplate',
        'lines'                            => '\OpenAPI\Client\Model\DeliverySlipShowResponseDeliverySlipLines[]',
        'email_url_file_downloaded_at'     => 'string',
        'email_url_file_downloaded_status' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'id'                               => 'int64',
        'company_id'                       => 'int64',
        'delivery_slip_number'             => null,
        'branch_no'                        => null,
        'subject'                          => null,
        'template_id'                      => 'int64',
        'template_name'                    => null,
        'delivery_slip_date'               => 'date',
        'issue_date'                       => 'date',
        'delivery_slip_note'               => null,
        'memo'                             => null,
        'sending_status'                   => null,
        'payment_status'                   => null,
        'cancel_status'                    => null,
        'deal_status'                      => null,
        'deal_id'                          => 'int64',
        'tax_entry_method'                 => null,
        'tax_fraction'                     => null,
        'line_amount_fraction'             => null,
        'withholding_tax_entry_method'     => null,
        'total_amount'                     => 'double',
        'created_at'                       => 'date-time',
        'amount_withholding_tax'           => null,
        'amount_including_tax'             => 'double',
        'amount_excluding_tax'             => null,
        'amount_tax'                       => null,
        'amount_including_tax_10'          => 'double',
        'amount_excluding_tax_10'          => 'double',
        'amount_tax_10'                    => 'double',
        'amount_including_tax_8'           => 'double',
        'amount_excluding_tax_8'           => 'double',
        'amount_tax_8'                     => 'double',
        'amount_including_tax_8_reduced'   => 'double',
        'amount_excluding_tax_8_reduced'   => 'double',
        'amount_tax_8_reduced'             => 'double',
        'amount_including_tax_0'           => 'double',
        'amount_excluding_tax_0'           => 'double',
        'amount_tax_0'                     => 'double',
        'partner_id'                       => 'int64',
        'partner_code'                     => null,
        'partner_name'                     => null,
        'partner_title'                    => null,
        'partner_address_zipcode'          => null,
        'partner_address_prefecture_code'  => null,
        'partner_address_street_name1'     => null,
        'partner_address_street_name2'     => null,
        'partner_contact_department'       => null,
        'partner_contact_name'             => null,
        'partner_display_name'             => null,
        'company_contact_name'             => null,
        'company_name'                     => null,
        'company_description'              => null,
        'template'                         => null,
        'lines'                            => null,
        'email_url_file_downloaded_at'     => 'string',
        'email_url_file_downloaded_status' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id'                               => 'id',
        'company_id'                       => 'company_id',
        'delivery_slip_number'             => 'delivery_slip_number',
        'branch_no'                        => 'branch_no',
        'subject'                          => 'subject',
        'template_id'                      => 'template_id',
        'template_name'                    => 'template_name',
        'delivery_slip_date'               => 'delivery_slip_date',
        'issue_date'                       => 'issue_date',
        'delivery_slip_note'               => 'delivery_slip_note',
        'memo'                             => 'memo',
        'sending_status'                   => 'sending_status',
        'payment_status'                   => 'payment_status',
        'cancel_status'                    => 'cancel_status',
        'deal_status'                      => 'deal_status',
        'deal_id'                          => 'deal_id',
        'tax_entry_method'                 => 'tax_entry_method',
        'tax_fraction'                     => 'tax_fraction',
        'line_amount_fraction'             => 'line_amount_fraction',
        'withholding_tax_entry_method'     => 'withholding_tax_entry_method',
        'total_amount'                     => 'total_amount',
        'created_at'                       => 'created_at',
        'amount_withholding_tax'           => 'amount_withholding_tax',
        'amount_including_tax'             => 'amount_including_tax',
        'amount_excluding_tax'             => 'amount_excluding_tax',
        'amount_tax'                       => 'amount_tax',
        'amount_including_tax_10'          => 'amount_including_tax_10',
        'amount_excluding_tax_10'          => 'amount_excluding_tax_10',
        'amount_tax_10'                    => 'amount_tax_10',
        'amount_including_tax_8'           => 'amount_including_tax_8',
        'amount_excluding_tax_8'           => 'amount_excluding_tax_8',
        'amount_tax_8'                     => 'amount_tax_8',
        'amount_including_tax_8_reduced'   => 'amount_including_tax_8_reduced',
        'amount_excluding_tax_8_reduced'   => 'amount_excluding_tax_8_reduced',
        'amount_tax_8_reduced'             => 'amount_tax_8_reduced',
        'amount_including_tax_0'           => 'amount_including_tax_0',
        'amount_excluding_tax_0'           => 'amount_excluding_tax_0',
        'amount_tax_0'                     => 'amount_tax_0',
        'partner_id'                       => 'partner_id',
        'partner_code'                     => 'partner_code',
        'partner_name'                     => 'partner_name',
        'partner_title'                    => 'partner_title',
        'partner_address_zipcode'          => 'partner_address_zipcode',
        'partner_address_prefecture_code'  => 'partner_address_prefecture_code',
        'partner_address_street_name1'     => 'partner_address_street_name1',
        'partner_address_street_name2'     => 'partner_address_street_name2',
        'partner_contact_department'       => 'partner_contact_department',
        'partner_contact_name'             => 'partner_contact_name',
        'partner_display_name'             => 'partner_display_name',
        'company_contact_name'             => 'company_contact_name',
        'company_name'                     => 'company_name',
        'company_description'              => 'company_description',
        'template'                         => 'template',
        'lines'                            => 'lines',
        'email_url_file_downloaded_at'     => 'email_url_file_downloaded_at',
        'email_url_file_downloaded_status' => 'email_url_file_downloaded_status',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'id'                               => 'setId',
        'company_id'                       => 'setCompanyId',
        'delivery_slip_number'             => 'setDeliverySlipNumber',
        'branch_no'                        => 'setBranchNo',
        'subject'                          => 'setSubject',
        'template_id'                      => 'setTemplateId',
        'template_name'                    => 'setTemplateName',
        'delivery_slip_date'               => 'setDeliverySlipDate',
        'issue_date'                       => 'setIssueDate',
        'delivery_slip_note'               => 'setDeliverySlipNote',
        'memo'                             => 'setMemo',
        'sending_status'                   => 'setSendingStatus',
        'payment_status'                   => 'setPaymentStatus',
        'cancel_status'                    => 'setCancelStatus',
        'deal_status'                      => 'setDealStatus',
        'deal_id'                          => 'setDealId',
        'tax_entry_method'                 => 'setTaxEntryMethod',
        'tax_fraction'                     => 'setTaxFraction',
        'line_amount_fraction'             => 'setLineAmountFraction',
        'withholding_tax_entry_method'     => 'setWithholdingTaxEntryMethod',
        'total_amount'                     => 'setTotalAmount',
        'created_at'                       => 'setCreatedAt',
        'amount_withholding_tax'           => 'setAmountWithholdingTax',
        'amount_including_tax'             => 'setAmountIncludingTax',
        'amount_excluding_tax'             => 'setAmountExcludingTax',
        'amount_tax'                       => 'setAmountTax',
        'amount_including_tax_10'          => 'setAmountIncludingTax10',
        'amount_excluding_tax_10'          => 'setAmountExcludingTax10',
        'amount_tax_10'                    => 'setAmountTax10',
        'amount_including_tax_8'           => 'setAmountIncludingTax8',
        'amount_excluding_tax_8'           => 'setAmountExcludingTax8',
        'amount_tax_8'                     => 'setAmountTax8',
        'amount_including_tax_8_reduced'   => 'setAmountIncludingTax8Reduced',
        'amount_excluding_tax_8_reduced'   => 'setAmountExcludingTax8Reduced',
        'amount_tax_8_reduced'             => 'setAmountTax8Reduced',
        'amount_including_tax_0'           => 'setAmountIncludingTax0',
        'amount_excluding_tax_0'           => 'setAmountExcludingTax0',
        'amount_tax_0'                     => 'setAmountTax0',
        'partner_id'                       => 'setPartnerId',
        'partner_code'                     => 'setPartnerCode',
        'partner_name'                     => 'setPartnerName',
        'partner_title'                    => 'setPartnerTitle',
        'partner_address_zipcode'          => 'setPartnerAddressZipcode',
        'partner_address_prefecture_code'  => 'setPartnerAddressPrefectureCode',
        'partner_address_street_name1'     => 'setPartnerAddressStreetName1',
        'partner_address_street_name2'     => 'setPartnerAddressStreetName2',
        'partner_contact_department'       => 'setPartnerContactDepartment',
        'partner_contact_name'             => 'setPartnerContactName',
        'partner_display_name'             => 'setPartnerDisplayName',
        'company_contact_name'             => 'setCompanyContactName',
        'company_name'                     => 'setCompanyName',
        'company_description'              => 'setCompanyDescription',
        'template'                         => 'setTemplate',
        'lines'                            => 'setLines',
        'email_url_file_downloaded_at'     => 'setEmailUrlFileDownloadedAt',
        'email_url_file_downloaded_status' => 'setEmailUrlFileDownloadedStatus',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'id'                               => 'getId',
        'company_id'                       => 'getCompanyId',
        'delivery_slip_number'             => 'getDeliverySlipNumber',
        'branch_no'                        => 'getBranchNo',
        'subject'                          => 'getSubject',
        'template_id'                      => 'getTemplateId',
        'template_name'                    => 'getTemplateName',
        'delivery_slip_date'               => 'getDeliverySlipDate',
        'issue_date'                       => 'getIssueDate',
        'delivery_slip_note'               => 'getDeliverySlipNote',
        'memo'                             => 'getMemo',
        'sending_status'                   => 'getSendingStatus',
        'payment_status'                   => 'getPaymentStatus',
        'cancel_status'                    => 'getCancelStatus',
        'deal_status'                      => 'getDealStatus',
        'deal_id'                          => 'getDealId',
        'tax_entry_method'                 => 'getTaxEntryMethod',
        'tax_fraction'                     => 'getTaxFraction',
        'line_amount_fraction'             => 'getLineAmountFraction',
        'withholding_tax_entry_method'     => 'getWithholdingTaxEntryMethod',
        'total_amount'                     => 'getTotalAmount',
        'created_at'                       => 'getCreatedAt',
        'amount_withholding_tax'           => 'getAmountWithholdingTax',
        'amount_including_tax'             => 'getAmountIncludingTax',
        'amount_excluding_tax'             => 'getAmountExcludingTax',
        'amount_tax'                       => 'getAmountTax',
        'amount_including_tax_10'          => 'getAmountIncludingTax10',
        'amount_excluding_tax_10'          => 'getAmountExcludingTax10',
        'amount_tax_10'                    => 'getAmountTax10',
        'amount_including_tax_8'           => 'getAmountIncludingTax8',
        'amount_excluding_tax_8'           => 'getAmountExcludingTax8',
        'amount_tax_8'                     => 'getAmountTax8',
        'amount_including_tax_8_reduced'   => 'getAmountIncludingTax8Reduced',
        'amount_excluding_tax_8_reduced'   => 'getAmountExcludingTax8Reduced',
        'amount_tax_8_reduced'             => 'getAmountTax8Reduced',
        'amount_including_tax_0'           => 'getAmountIncludingTax0',
        'amount_excluding_tax_0'           => 'getAmountExcludingTax0',
        'amount_tax_0'                     => 'getAmountTax0',
        'partner_id'                       => 'getPartnerId',
        'partner_code'                     => 'getPartnerCode',
        'partner_name'                     => 'getPartnerName',
        'partner_title'                    => 'getPartnerTitle',
        'partner_address_zipcode'          => 'getPartnerAddressZipcode',
        'partner_address_prefecture_code'  => 'getPartnerAddressPrefectureCode',
        'partner_address_street_name1'     => 'getPartnerAddressStreetName1',
        'partner_address_street_name2'     => 'getPartnerAddressStreetName2',
        'partner_contact_department'       => 'getPartnerContactDepartment',
        'partner_contact_name'             => 'getPartnerContactName',
        'partner_display_name'             => 'getPartnerDisplayName',
        'company_contact_name'             => 'getCompanyContactName',
        'company_name'                     => 'getCompanyName',
        'company_description'              => 'getCompanyDescription',
        'template'                         => 'getTemplate',
        'lines'                            => 'getLines',
        'email_url_file_downloaded_at'     => 'getEmailUrlFileDownloadedAt',
        'email_url_file_downloaded_status' => 'getEmailUrlFileDownloadedStatus',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SENDING_STATUS_SENT                           = 'sent';
    const SENDING_STATUS_UNSENT                         = 'unsent';
    const PAYMENT_STATUS_SETTLED                        = 'settled';
    const PAYMENT_STATUS_UNSETTLED                      = 'unsettled';
    const CANCEL_STATUS_CANCELED                        = 'canceled';
    const CANCEL_STATUS_UNCANCELED                      = 'uncanceled';
    const DEAL_STATUS_REGISTERED                        = 'registered';
    const DEAL_STATUS_UNREGISTERED                      = 'unregistered';
    const TAX_ENTRY_METHOD_IN                           = 'in';
    const TAX_ENTRY_METHOD_OUT                          = 'out';
    const TAX_FRACTION_OMIT                             = 'omit';
    const TAX_FRACTION_ROUND_UP                         = 'round_up';
    const TAX_FRACTION_ROUND                            = 'round';
    const LINE_AMOUNT_FRACTION_OMIT                     = 'omit';
    const LINE_AMOUNT_FRACTION_ROUND_UP                 = 'round_up';
    const LINE_AMOUNT_FRACTION_ROUND                    = 'round';
    const WITHHOLDING_TAX_ENTRY_METHOD_IN               = 'in';
    const WITHHOLDING_TAX_ENTRY_METHOD_OUT              = 'out';
    const PARTNER_TITLE_1                               = '御中';
    const PARTNER_TITLE_2                               = '様';
    const PARTNER_TITLE_3                               = '(空白)';
    const EMAIL_URL_FILE_DOWNLOADED_STATUS_DOWNLOADED   = 'downloaded';
    const EMAIL_URL_FILE_DOWNLOADED_STATUS_UNDOWNLOADED = 'undownloaded';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getSendingStatusAllowableValues()
    {
        return [
            self::SENDING_STATUS_SENT,
            self::SENDING_STATUS_UNSENT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_SETTLED,
            self::PAYMENT_STATUS_UNSETTLED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getCancelStatusAllowableValues()
    {
        return [
            self::CANCEL_STATUS_CANCELED,
            self::CANCEL_STATUS_UNCANCELED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getDealStatusAllowableValues()
    {
        return [
            self::DEAL_STATUS_REGISTERED,
            self::DEAL_STATUS_UNREGISTERED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTaxEntryMethodAllowableValues()
    {
        return [
            self::TAX_ENTRY_METHOD_IN,
            self::TAX_ENTRY_METHOD_OUT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTaxFractionAllowableValues()
    {
        return [
            self::TAX_FRACTION_OMIT,
            self::TAX_FRACTION_ROUND_UP,
            self::TAX_FRACTION_ROUND,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getLineAmountFractionAllowableValues()
    {
        return [
            self::LINE_AMOUNT_FRACTION_OMIT,
            self::LINE_AMOUNT_FRACTION_ROUND_UP,
            self::LINE_AMOUNT_FRACTION_ROUND,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getWithholdingTaxEntryMethodAllowableValues()
    {
        return [
            self::WITHHOLDING_TAX_ENTRY_METHOD_IN,
            self::WITHHOLDING_TAX_ENTRY_METHOD_OUT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPartnerTitleAllowableValues()
    {
        return [
            self::PARTNER_TITLE_1,
            self::PARTNER_TITLE_2,
            self::PARTNER_TITLE_3,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getEmailUrlFileDownloadedStatusAllowableValues()
    {
        return [
            self::EMAIL_URL_FILE_DOWNLOADED_STATUS_DOWNLOADED,
            self::EMAIL_URL_FILE_DOWNLOADED_STATUS_UNDOWNLOADED,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id']                               = $data['id'] ?? null;
        $this->container['company_id']                       = $data['company_id'] ?? null;
        $this->container['delivery_slip_number']             = $data['delivery_slip_number'] ?? null;
        $this->container['branch_no']                        = $data['branch_no'] ?? null;
        $this->container['subject']                          = $data['subject'] ?? null;
        $this->container['template_id']                      = $data['template_id'] ?? null;
        $this->container['template_name']                    = $data['template_name'] ?? null;
        $this->container['delivery_slip_date']               = $data['delivery_slip_date'] ?? null;
        $this->container['issue_date']                       = $data['issue_date'] ?? null;
        $this->container['delivery_slip_note']               = $data['delivery_slip_note'] ?? null;
        $this->container['memo']                             = $data['memo'] ?? null;
        $this->container['sending_status']                   = $data['sending_status'] ?? null;
        $this->container['payment_status']                   = $data['payment_status'] ?? null;
        $this->container['cancel_status']                    = $data['cancel_status'] ?? null;
        $this->container['deal_status']                      = $data['deal_status'] ?? null;
        $this->container['deal_id']                          = $data['deal_id'] ?? null;
        $this->container['tax_entry_method']                 = $data['tax_entry_method'] ?? null;
        $this->container['tax_fraction']                     = $data['tax_fraction'] ?? null;
        $this->container['line_amount_fraction']             = $data['line_amount_fraction'] ?? null;
        $this->container['withholding_tax_entry_method']     = $data['withholding_tax_entry_method'] ?? null;
        $this->container['total_amount']                     = $data['total_amount'] ?? null;
        $this->container['created_at']                       = $data['created_at'] ?? null;
        $this->container['amount_withholding_tax']           = $data['amount_withholding_tax'] ?? null;
        $this->container['amount_including_tax']             = $data['amount_including_tax'] ?? null;
        $this->container['amount_excluding_tax']             = $data['amount_excluding_tax'] ?? null;
        $this->container['amount_tax']                       = $data['amount_tax'] ?? null;
        $this->container['amount_including_tax_10']          = $data['amount_including_tax_10'] ?? null;
        $this->container['amount_excluding_tax_10']          = $data['amount_excluding_tax_10'] ?? null;
        $this->container['amount_tax_10']                    = $data['amount_tax_10'] ?? null;
        $this->container['amount_including_tax_8']           = $data['amount_including_tax_8'] ?? null;
        $this->container['amount_excluding_tax_8']           = $data['amount_excluding_tax_8'] ?? null;
        $this->container['amount_tax_8']                     = $data['amount_tax_8'] ?? null;
        $this->container['amount_including_tax_8_reduced']   = $data['amount_including_tax_8_reduced'] ?? null;
        $this->container['amount_excluding_tax_8_reduced']   = $data['amount_excluding_tax_8_reduced'] ?? null;
        $this->container['amount_tax_8_reduced']             = $data['amount_tax_8_reduced'] ?? null;
        $this->container['amount_including_tax_0']           = $data['amount_including_tax_0'] ?? null;
        $this->container['amount_excluding_tax_0']           = $data['amount_excluding_tax_0'] ?? null;
        $this->container['amount_tax_0']                     = $data['amount_tax_0'] ?? null;
        $this->container['partner_id']                       = $data['partner_id'] ?? null;
        $this->container['partner_code']                     = $data['partner_code'] ?? null;
        $this->container['partner_name']                     = $data['partner_name'] ?? null;
        $this->container['partner_title']                    = $data['partner_title'] ?? null;
        $this->container['partner_address_zipcode']          = $data['partner_address_zipcode'] ?? null;
        $this->container['partner_address_prefecture_code']  = $data['partner_address_prefecture_code'] ?? null;
        $this->container['partner_address_street_name1']     = $data['partner_address_street_name1'] ?? null;
        $this->container['partner_address_street_name2']     = $data['partner_address_street_name2'] ?? null;
        $this->container['partner_contact_department']       = $data['partner_contact_department'] ?? null;
        $this->container['partner_contact_name']             = $data['partner_contact_name'] ?? null;
        $this->container['partner_display_name']             = $data['partner_display_name'] ?? null;
        $this->container['company_contact_name']             = $data['company_contact_name'] ?? null;
        $this->container['company_name']                     = $data['company_name'] ?? null;
        $this->container['company_description']              = $data['company_description'] ?? null;
        $this->container['template']                         = $data['template'] ?? null;
        $this->container['lines']                            = $data['lines'] ?? null;
        $this->container['email_url_file_downloaded_at']     = $data['email_url_file_downloaded_at'] ?? null;
        $this->container['email_url_file_downloaded_status'] = $data['email_url_file_downloaded_status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if (($this->container['company_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'company_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['company_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'company_id', must be bigger than or equal to 1.";
        }

        if ($this->container['delivery_slip_number'] === null) {
            $invalidProperties[] = "'delivery_slip_number' can't be null";
        }
        if ((mb_strlen($this->container['delivery_slip_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'delivery_slip_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['branch_no']) && ($this->container['branch_no'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'branch_no', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['branch_no']) && ($this->container['branch_no'] < 0)) {
            $invalidProperties[] = "invalid value for 'branch_no', must be bigger than or equal to 0.";
        }

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ((mb_strlen($this->container['subject']) > 255)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['template_id']) && ($this->container['template_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'template_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['template_id']) && ($this->container['template_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'template_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['template_name']) && (mb_strlen($this->container['template_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'template_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['delivery_slip_date'] === null) {
            $invalidProperties[] = "'delivery_slip_date' can't be null";
        }
        if (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['delivery_slip_date'])) {
            $invalidProperties[] = "invalid value for 'delivery_slip_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (!is_null($this->container['issue_date']) && !preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['issue_date'])) {
            $invalidProperties[] = "invalid value for 'issue_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if ($this->container['delivery_slip_note'] === null) {
            $invalidProperties[] = "'delivery_slip_note' can't be null";
        }
        if ((mb_strlen($this->container['delivery_slip_note']) > 4000)) {
            $invalidProperties[] = "invalid value for 'delivery_slip_note', the character length must be smaller than or equal to 4000.";
        }

        if ($this->container['memo'] === null) {
            $invalidProperties[] = "'memo' can't be null";
        }
        if ((mb_strlen($this->container['memo']) > 2000)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 2000.";
        }

        if ($this->container['sending_status'] === null) {
            $invalidProperties[] = "'sending_status' can't be null";
        }
        $allowedValues = $this->getSendingStatusAllowableValues();
        if (!is_null($this->container['sending_status']) && !in_array($this->container['sending_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sending_status', must be one of '%s'",
                $this->container['sending_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cancel_status'] === null) {
            $invalidProperties[] = "'cancel_status' can't be null";
        }
        $allowedValues = $this->getCancelStatusAllowableValues();
        if (!is_null($this->container['cancel_status']) && !in_array($this->container['cancel_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancel_status', must be one of '%s'",
                $this->container['cancel_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['deal_status'] === null) {
            $invalidProperties[] = "'deal_status' can't be null";
        }
        $allowedValues = $this->getDealStatusAllowableValues();
        if (!is_null($this->container['deal_status']) && !in_array($this->container['deal_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deal_status', must be one of '%s'",
                $this->container['deal_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['deal_id']) && ($this->container['deal_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'deal_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['deal_id']) && ($this->container['deal_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'deal_id', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTaxEntryMethodAllowableValues();
        if (!is_null($this->container['tax_entry_method']) && !in_array($this->container['tax_entry_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_entry_method', must be one of '%s'",
                $this->container['tax_entry_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxFractionAllowableValues();
        if (!is_null($this->container['tax_fraction']) && !in_array($this->container['tax_fraction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_fraction', must be one of '%s'",
                $this->container['tax_fraction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLineAmountFractionAllowableValues();
        if (!is_null($this->container['line_amount_fraction']) && !in_array($this->container['line_amount_fraction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'line_amount_fraction', must be one of '%s'",
                $this->container['line_amount_fraction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWithholdingTaxEntryMethodAllowableValues();
        if (!is_null($this->container['withholding_tax_entry_method']) && !in_array($this->container['withholding_tax_entry_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'withholding_tax_entry_method', must be one of '%s'",
                $this->container['withholding_tax_entry_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/', $this->container['created_at'])) {
            $invalidProperties[] = "invalid value for 'created_at', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/.";
        }

        if ($this->container['amount_including_tax'] === null) {
            $invalidProperties[] = "'amount_including_tax' can't be null";
        }
        if ($this->container['amount_excluding_tax'] === null) {
            $invalidProperties[] = "'amount_excluding_tax' can't be null";
        }
        if ($this->container['amount_tax'] === null) {
            $invalidProperties[] = "'amount_tax' can't be null";
        }
        if ($this->container['partner_id'] === null) {
            $invalidProperties[] = "'partner_id' can't be null";
        }
        if (($this->container['partner_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'partner_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['partner_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'partner_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_name']) && (mb_strlen($this->container['partner_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_name', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getPartnerTitleAllowableValues();
        if (!is_null($this->container['partner_title']) && !in_array($this->container['partner_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partner_title', must be one of '%s'",
                $this->container['partner_title'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['partner_address_zipcode']) && (mb_strlen($this->container['partner_address_zipcode']) > 10)) {
            $invalidProperties[] = "invalid value for 'partner_address_zipcode', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['partner_address_prefecture_code']) && ($this->container['partner_address_prefecture_code'] > 46)) {
            $invalidProperties[] = "invalid value for 'partner_address_prefecture_code', must be smaller than or equal to 46.";
        }

        if (!is_null($this->container['partner_address_prefecture_code']) && ($this->container['partner_address_prefecture_code'] < -1)) {
            $invalidProperties[] = "invalid value for 'partner_address_prefecture_code', must be bigger than or equal to -1.";
        }

        if (!is_null($this->container['partner_address_street_name1']) && (mb_strlen($this->container['partner_address_street_name1']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_address_street_name1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_address_street_name2']) && (mb_strlen($this->container['partner_address_street_name2']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_address_street_name2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_contact_department']) && (mb_strlen($this->container['partner_contact_department']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_contact_department', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_contact_name']) && (mb_strlen($this->container['partner_contact_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_contact_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_display_name']) && (mb_strlen($this->container['partner_display_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_display_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_contact_name']) && (mb_strlen($this->container['company_contact_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_contact_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_description']) && (mb_strlen($this->container['company_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['lines'] === null) {
            $invalidProperties[] = "'lines' can't be null";
        }
        if (!is_null($this->container['email_url_file_downloaded_at']) && !preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/', $this->container['email_url_file_downloaded_at'])) {
            $invalidProperties[] = "invalid value for 'email_url_file_downloaded_at', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/.";
        }

        $allowedValues = $this->getEmailUrlFileDownloadedStatusAllowableValues();
        if (!is_null($this->container['email_url_file_downloaded_status']) && !in_array($this->container['email_url_file_downloaded_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'email_url_file_downloaded_status', must be one of '%s'",
                $this->container['email_url_file_downloaded_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param int $id 納品書ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 9223372036854775807.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DeliverySlipShowResponseDeliverySlip., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id.
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id.
     *
     * @param int $company_id 事業所ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {

        if (($company_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 9223372036854775807.');
        }
        if (($company_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling DeliverySlipShowResponseDeliverySlip., must be bigger than or equal to 1.');
        }

        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets delivery_slip_number.
     *
     * @return string
     */
    public function getDeliverySlipNumber()
    {
        return $this->container['delivery_slip_number'];
    }

    /**
     * Sets delivery_slip_number.
     *
     * @param string $delivery_slip_number 納品書番号
     *
     * @return self
     */
    public function setDeliverySlipNumber($delivery_slip_number)
    {
        if ((mb_strlen($delivery_slip_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $delivery_slip_number when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['delivery_slip_number'] = $delivery_slip_number;

        return $this;
    }

    /**
     * Gets branch_no.
     *
     * @return int|null
     */
    public function getBranchNo()
    {
        return $this->container['branch_no'];
    }

    /**
     * Sets branch_no.
     *
     * @param int|null $branch_no 枝番
     *
     * @return self
     */
    public function setBranchNo($branch_no)
    {

        if (!is_null($branch_no) && ($branch_no > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $branch_no when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($branch_no) && ($branch_no < 0)) {
            throw new \InvalidArgumentException('invalid value for $branch_no when calling DeliverySlipShowResponseDeliverySlip., must be bigger than or equal to 0.');
        }

        $this->container['branch_no'] = $branch_no;

        return $this;
    }

    /**
     * Gets subject.
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject.
     *
     * @param string $subject 件名
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if ((mb_strlen($subject) > 255)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets template_id.
     *
     * @return int|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id.
     *
     * @param int|null $template_id 帳票テンプレートID
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {

        if (!is_null($template_id) && ($template_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($template_id) && ($template_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling DeliverySlipShowResponseDeliverySlip., must be bigger than or equal to 1.');
        }

        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_name.
     *
     * @return string|null
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name.
     *
     * @param string|null $template_name 帳票テンプレート名
     *
     * @return self
     */
    public function setTemplateName($template_name)
    {
        if (!is_null($template_name) && (mb_strlen($template_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $template_name when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets delivery_slip_date.
     *
     * @return \DateTime
     */
    public function getDeliverySlipDate()
    {
        return $this->container['delivery_slip_date'];
    }

    /**
     * Sets delivery_slip_date.
     *
     * @param \DateTime $delivery_slip_date 請求日
     *
     * @return self
     */
    public function setDeliverySlipDate($delivery_slip_date)
    {

        if ((!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $delivery_slip_date))) {
            throw new \InvalidArgumentException("invalid value for $delivery_slip_date when calling DeliverySlipShowResponseDeliverySlip., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['delivery_slip_date'] = $delivery_slip_date;

        return $this;
    }

    /**
     * Gets issue_date.
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date.
     *
     * @param \DateTime|null $issue_date 発生日
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {

        if (!is_null($issue_date) && (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $issue_date))) {
            throw new \InvalidArgumentException("invalid value for $issue_date when calling DeliverySlipShowResponseDeliverySlip., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets delivery_slip_note.
     *
     * @return string
     */
    public function getDeliverySlipNote()
    {
        return $this->container['delivery_slip_note'];
    }

    /**
     * Sets delivery_slip_note.
     *
     * @param string $delivery_slip_note 備考
     *
     * @return self
     */
    public function setDeliverySlipNote($delivery_slip_note)
    {
        if ((mb_strlen($delivery_slip_note) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $delivery_slip_note when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 4000.');
        }

        $this->container['delivery_slip_note'] = $delivery_slip_note;

        return $this;
    }

    /**
     * Gets memo.
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo.
     *
     * @param string $memo 社内メモ
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if ((mb_strlen($memo) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 2000.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets sending_status.
     *
     * @return string
     */
    public function getSendingStatus()
    {
        return $this->container['sending_status'];
    }

    /**
     * Sets sending_status.
     *
     * @param string $sending_status 送付ステータス（sent: 送付済み、 unsent: 送付待ち）
     *
     * @return self
     */
    public function setSendingStatus($sending_status)
    {
        $allowedValues = $this->getSendingStatusAllowableValues();
        if (!in_array($sending_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sending_status', must be one of '%s'",
                    $sending_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sending_status'] = $sending_status;

        return $this;
    }

    /**
     * Gets payment_status.
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status.
     *
     * @param string $payment_status 入金ステータス（unsettled: 入金待ち, settled: 入金済み）
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets cancel_status.
     *
     * @return string
     */
    public function getCancelStatus()
    {
        return $this->container['cancel_status'];
    }

    /**
     * Sets cancel_status.
     *
     * @param string $cancel_status 取消済み（canceled: 該当する、 uncanceled: 該当しない）
     *
     * @return self
     */
    public function setCancelStatus($cancel_status)
    {
        $allowedValues = $this->getCancelStatusAllowableValues();
        if (!in_array($cancel_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancel_status', must be one of '%s'",
                    $cancel_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancel_status'] = $cancel_status;

        return $this;
    }

    /**
     * Gets deal_status.
     *
     * @return string
     */
    public function getDealStatus()
    {
        return $this->container['deal_status'];
    }

    /**
     * Sets deal_status.
     *
     * @param string $deal_status 取引ステータス（registered: 登録済み、 unregistered: 登録待ち）
     *
     * @return self
     */
    public function setDealStatus($deal_status)
    {
        $allowedValues = $this->getDealStatusAllowableValues();
        if (!in_array($deal_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deal_status', must be one of '%s'",
                    $deal_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deal_status'] = $deal_status;

        return $this;
    }

    /**
     * Gets deal_id.
     *
     * @return int|null
     */
    public function getDealId()
    {
        return $this->container['deal_id'];
    }

    /**
     * Sets deal_id.
     *
     * @param int|null $deal_id 取引ID （deal_statusがunregisteredの場合、nullになります。）
     *
     * @return self
     */
    public function setDealId($deal_id)
    {

        if (!is_null($deal_id) && ($deal_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $deal_id when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($deal_id) && ($deal_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $deal_id when calling DeliverySlipShowResponseDeliverySlip., must be bigger than or equal to 1.');
        }

        $this->container['deal_id'] = $deal_id;

        return $this;
    }

    /**
     * Gets tax_entry_method.
     *
     * @return string|null
     */
    public function getTaxEntryMethod()
    {
        return $this->container['tax_entry_method'];
    }

    /**
     * Sets tax_entry_method.
     *
     * @param string|null $tax_entry_method 消費税の内税・外税区分（in: 税込表示（内税）、out: 税別表示（外税））
     *
     * @return self
     */
    public function setTaxEntryMethod($tax_entry_method)
    {
        $allowedValues = $this->getTaxEntryMethodAllowableValues();
        if (!is_null($tax_entry_method) && !in_array($tax_entry_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_entry_method', must be one of '%s'",
                    $tax_entry_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_entry_method'] = $tax_entry_method;

        return $this;
    }

    /**
     * Gets tax_fraction.
     *
     * @return string|null
     */
    public function getTaxFraction()
    {
        return $this->container['tax_fraction'];
    }

    /**
     * Sets tax_fraction.
     *
     * @param string|null $tax_fraction 消費税端数の計算方法（omit: 切り捨て、round_up: 切り上げ、round: 四捨五入）
     *
     * @return self
     */
    public function setTaxFraction($tax_fraction)
    {
        $allowedValues = $this->getTaxFractionAllowableValues();
        if (!is_null($tax_fraction) && !in_array($tax_fraction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_fraction', must be one of '%s'",
                    $tax_fraction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_fraction'] = $tax_fraction;

        return $this;
    }

    /**
     * Gets line_amount_fraction.
     *
     * @return string|null
     */
    public function getLineAmountFraction()
    {
        return $this->container['line_amount_fraction'];
    }

    /**
     * Sets line_amount_fraction.
     *
     * @param string|null $line_amount_fraction 金額端数の計算方法（omit: 切り捨て、round_up: 切り上げ、round: 四捨五入）
     *
     * @return self
     */
    public function setLineAmountFraction($line_amount_fraction)
    {
        $allowedValues = $this->getLineAmountFractionAllowableValues();
        if (!is_null($line_amount_fraction) && !in_array($line_amount_fraction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'line_amount_fraction', must be one of '%s'",
                    $line_amount_fraction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_amount_fraction'] = $line_amount_fraction;

        return $this;
    }

    /**
     * Gets withholding_tax_entry_method.
     *
     * @return string|null
     */
    public function getWithholdingTaxEntryMethod()
    {
        return $this->container['withholding_tax_entry_method'];
    }

    /**
     * Sets withholding_tax_entry_method.
     *
     * @param string|null $withholding_tax_entry_method 源泉徴収の計算方法（in: 税込み価格で計算、out: 税別価格で計算）
     *
     * @return self
     */
    public function setWithholdingTaxEntryMethod($withholding_tax_entry_method)
    {
        $allowedValues = $this->getWithholdingTaxEntryMethodAllowableValues();
        if (!is_null($withholding_tax_entry_method) && !in_array($withholding_tax_entry_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'withholding_tax_entry_method', must be one of '%s'",
                    $withholding_tax_entry_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['withholding_tax_entry_method'] = $withholding_tax_entry_method;

        return $this;
    }

    /**
     * Gets total_amount.
     *
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount.
     *
     * @param float $total_amount 合計金額
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets created_at.
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at.
     *
     * @param \DateTime $created_at 作成日時
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if ((!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/', $created_at))) {
            throw new \InvalidArgumentException("invalid value for $created_at when calling DeliverySlipShowResponseDeliverySlip., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/.");
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets amount_withholding_tax.
     *
     * @return float|null
     */
    public function getAmountWithholdingTax()
    {
        return $this->container['amount_withholding_tax'];
    }

    /**
     * Sets amount_withholding_tax.
     *
     * @param float|null $amount_withholding_tax 源泉所得税
     *
     * @return self
     */
    public function setAmountWithholdingTax($amount_withholding_tax)
    {
        $this->container['amount_withholding_tax'] = $amount_withholding_tax;

        return $this;
    }

    /**
     * Gets amount_including_tax.
     *
     * @return float
     */
    public function getAmountIncludingTax()
    {
        return $this->container['amount_including_tax'];
    }

    /**
     * Sets amount_including_tax.
     *
     * @param float $amount_including_tax 税込金額
     *
     * @return self
     */
    public function setAmountIncludingTax($amount_including_tax)
    {
        $this->container['amount_including_tax'] = $amount_including_tax;

        return $this;
    }

    /**
     * Gets amount_excluding_tax.
     *
     * @return float
     */
    public function getAmountExcludingTax()
    {
        return $this->container['amount_excluding_tax'];
    }

    /**
     * Sets amount_excluding_tax.
     *
     * @param float $amount_excluding_tax 小計（税別）
     *
     * @return self
     */
    public function setAmountExcludingTax($amount_excluding_tax)
    {
        $this->container['amount_excluding_tax'] = $amount_excluding_tax;

        return $this;
    }

    /**
     * Gets amount_tax.
     *
     * @return float
     */
    public function getAmountTax()
    {
        return $this->container['amount_tax'];
    }

    /**
     * Sets amount_tax.
     *
     * @param float $amount_tax 消費税額
     *
     * @return self
     */
    public function setAmountTax($amount_tax)
    {
        $this->container['amount_tax'] = $amount_tax;

        return $this;
    }

    /**
     * Gets amount_including_tax_10.
     *
     * @return float|null
     */
    public function getAmountIncludingTax10()
    {
        return $this->container['amount_including_tax_10'];
    }

    /**
     * Sets amount_including_tax_10.
     *
     * @param float|null $amount_including_tax_10 10%対象 税込
     *
     * @return self
     */
    public function setAmountIncludingTax10($amount_including_tax_10)
    {
        $this->container['amount_including_tax_10'] = $amount_including_tax_10;

        return $this;
    }

    /**
     * Gets amount_excluding_tax_10.
     *
     * @return float|null
     */
    public function getAmountExcludingTax10()
    {
        return $this->container['amount_excluding_tax_10'];
    }

    /**
     * Sets amount_excluding_tax_10.
     *
     * @param float|null $amount_excluding_tax_10 10%対象 税抜
     *
     * @return self
     */
    public function setAmountExcludingTax10($amount_excluding_tax_10)
    {
        $this->container['amount_excluding_tax_10'] = $amount_excluding_tax_10;

        return $this;
    }

    /**
     * Gets amount_tax_10.
     *
     * @return float|null
     */
    public function getAmountTax10()
    {
        return $this->container['amount_tax_10'];
    }

    /**
     * Sets amount_tax_10.
     *
     * @param float|null $amount_tax_10 10%対象 消費税
     *
     * @return self
     */
    public function setAmountTax10($amount_tax_10)
    {
        $this->container['amount_tax_10'] = $amount_tax_10;

        return $this;
    }

    /**
     * Gets amount_including_tax_8.
     *
     * @return float|null
     */
    public function getAmountIncludingTax8()
    {
        return $this->container['amount_including_tax_8'];
    }

    /**
     * Sets amount_including_tax_8.
     *
     * @param float|null $amount_including_tax_8 8%対象 税込
     *
     * @return self
     */
    public function setAmountIncludingTax8($amount_including_tax_8)
    {
        $this->container['amount_including_tax_8'] = $amount_including_tax_8;

        return $this;
    }

    /**
     * Gets amount_excluding_tax_8.
     *
     * @return float|null
     */
    public function getAmountExcludingTax8()
    {
        return $this->container['amount_excluding_tax_8'];
    }

    /**
     * Sets amount_excluding_tax_8.
     *
     * @param float|null $amount_excluding_tax_8 8%対象 税抜
     *
     * @return self
     */
    public function setAmountExcludingTax8($amount_excluding_tax_8)
    {
        $this->container['amount_excluding_tax_8'] = $amount_excluding_tax_8;

        return $this;
    }

    /**
     * Gets amount_tax_8.
     *
     * @return float|null
     */
    public function getAmountTax8()
    {
        return $this->container['amount_tax_8'];
    }

    /**
     * Sets amount_tax_8.
     *
     * @param float|null $amount_tax_8 8%対象 消費税
     *
     * @return self
     */
    public function setAmountTax8($amount_tax_8)
    {
        $this->container['amount_tax_8'] = $amount_tax_8;

        return $this;
    }

    /**
     * Gets amount_including_tax_8_reduced.
     *
     * @return float|null
     */
    public function getAmountIncludingTax8Reduced()
    {
        return $this->container['amount_including_tax_8_reduced'];
    }

    /**
     * Sets amount_including_tax_8_reduced.
     *
     * @param float|null $amount_including_tax_8_reduced 軽減税率8%対象 税込
     *
     * @return self
     */
    public function setAmountIncludingTax8Reduced($amount_including_tax_8_reduced)
    {
        $this->container['amount_including_tax_8_reduced'] = $amount_including_tax_8_reduced;

        return $this;
    }

    /**
     * Gets amount_excluding_tax_8_reduced.
     *
     * @return float|null
     */
    public function getAmountExcludingTax8Reduced()
    {
        return $this->container['amount_excluding_tax_8_reduced'];
    }

    /**
     * Sets amount_excluding_tax_8_reduced.
     *
     * @param float|null $amount_excluding_tax_8_reduced 軽減税率8%対象 税抜
     *
     * @return self
     */
    public function setAmountExcludingTax8Reduced($amount_excluding_tax_8_reduced)
    {
        $this->container['amount_excluding_tax_8_reduced'] = $amount_excluding_tax_8_reduced;

        return $this;
    }

    /**
     * Gets amount_tax_8_reduced.
     *
     * @return float|null
     */
    public function getAmountTax8Reduced()
    {
        return $this->container['amount_tax_8_reduced'];
    }

    /**
     * Sets amount_tax_8_reduced.
     *
     * @param float|null $amount_tax_8_reduced 軽減税率8%対象 消費税
     *
     * @return self
     */
    public function setAmountTax8Reduced($amount_tax_8_reduced)
    {
        $this->container['amount_tax_8_reduced'] = $amount_tax_8_reduced;

        return $this;
    }

    /**
     * Gets amount_including_tax_0.
     *
     * @return float|null
     */
    public function getAmountIncludingTax0()
    {
        return $this->container['amount_including_tax_0'];
    }

    /**
     * Sets amount_including_tax_0.
     *
     * @param float|null $amount_including_tax_0 0%対象 税込
     *
     * @return self
     */
    public function setAmountIncludingTax0($amount_including_tax_0)
    {
        $this->container['amount_including_tax_0'] = $amount_including_tax_0;

        return $this;
    }

    /**
     * Gets amount_excluding_tax_0.
     *
     * @return float|null
     */
    public function getAmountExcludingTax0()
    {
        return $this->container['amount_excluding_tax_0'];
    }

    /**
     * Sets amount_excluding_tax_0.
     *
     * @param float|null $amount_excluding_tax_0 0%対象 税抜
     *
     * @return self
     */
    public function setAmountExcludingTax0($amount_excluding_tax_0)
    {
        $this->container['amount_excluding_tax_0'] = $amount_excluding_tax_0;

        return $this;
    }

    /**
     * Gets amount_tax_0.
     *
     * @return float|null
     */
    public function getAmountTax0()
    {
        return $this->container['amount_tax_0'];
    }

    /**
     * Sets amount_tax_0.
     *
     * @param float|null $amount_tax_0 0%対象 消費税
     *
     * @return self
     */
    public function setAmountTax0($amount_tax_0)
    {
        $this->container['amount_tax_0'] = $amount_tax_0;

        return $this;
    }

    /**
     * Gets partner_id.
     *
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id.
     *
     * @param int $partner_id 取引先ID
     *
     * @return self
     */
    public function setPartnerId($partner_id)
    {

        if (($partner_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $partner_id when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 9223372036854775807.');
        }
        if (($partner_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $partner_id when calling DeliverySlipShowResponseDeliverySlip., must be bigger than or equal to 1.');
        }

        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets partner_code.
     *
     * @return string|null
     */
    public function getPartnerCode()
    {
        return $this->container['partner_code'];
    }

    /**
     * Sets partner_code.
     *
     * @param string|null $partner_code 取引先コード
     *
     * @return self
     */
    public function setPartnerCode($partner_code)
    {
        $this->container['partner_code'] = $partner_code;

        return $this;
    }

    /**
     * Gets partner_name.
     *
     * @return string|null
     */
    public function getPartnerName()
    {
        return $this->container['partner_name'];
    }

    /**
     * Sets partner_name.
     *
     * @param string|null $partner_name 取引先名 - partner_nameに空文字が戻る場合は、対象レコードをweb画面から更新するか、freee請求書APIから更新すると解消されます。
     *
     * @return self
     */
    public function setPartnerName($partner_name)
    {
        if (!is_null($partner_name) && (mb_strlen($partner_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_name when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['partner_name'] = $partner_name;

        return $this;
    }

    /**
     * Gets partner_title.
     *
     * @return string|null
     */
    public function getPartnerTitle()
    {
        return $this->container['partner_title'];
    }

    /**
     * Sets partner_title.
     *
     * @param string|null $partner_title 敬称（御中、様、(空白)の3つから選択）
     *
     * @return self
     */
    public function setPartnerTitle($partner_title)
    {
        $allowedValues = $this->getPartnerTitleAllowableValues();
        if (!is_null($partner_title) && !in_array($partner_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partner_title', must be one of '%s'",
                    $partner_title,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partner_title'] = $partner_title;

        return $this;
    }

    /**
     * Gets partner_address_zipcode.
     *
     * @return string|null
     */
    public function getPartnerAddressZipcode()
    {
        return $this->container['partner_address_zipcode'];
    }

    /**
     * Sets partner_address_zipcode.
     *
     * @param string|null $partner_address_zipcode 郵便番号
     *
     * @return self
     */
    public function setPartnerAddressZipcode($partner_address_zipcode)
    {
        if (!is_null($partner_address_zipcode) && (mb_strlen($partner_address_zipcode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_zipcode when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 10.');
        }

        $this->container['partner_address_zipcode'] = $partner_address_zipcode;

        return $this;
    }

    /**
     * Gets partner_address_prefecture_code.
     *
     * @return int|null
     */
    public function getPartnerAddressPrefectureCode()
    {
        return $this->container['partner_address_prefecture_code'];
    }

    /**
     * Sets partner_address_prefecture_code.
     *
     * @param int|null $partner_address_prefecture_code 都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄）
     *
     * @return self
     */
    public function setPartnerAddressPrefectureCode($partner_address_prefecture_code)
    {

        if (!is_null($partner_address_prefecture_code) && ($partner_address_prefecture_code > 46)) {
            throw new \InvalidArgumentException('invalid value for $partner_address_prefecture_code when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 46.');
        }
        if (!is_null($partner_address_prefecture_code) && ($partner_address_prefecture_code < -1)) {
            throw new \InvalidArgumentException('invalid value for $partner_address_prefecture_code when calling DeliverySlipShowResponseDeliverySlip., must be bigger than or equal to -1.');
        }

        $this->container['partner_address_prefecture_code'] = $partner_address_prefecture_code;

        return $this;
    }

    /**
     * Gets partner_address_street_name1.
     *
     * @return string|null
     */
    public function getPartnerAddressStreetName1()
    {
        return $this->container['partner_address_street_name1'];
    }

    /**
     * Sets partner_address_street_name1.
     *
     * @param string|null $partner_address_street_name1 取引先 市区町村・番地
     *
     * @return self
     */
    public function setPartnerAddressStreetName1($partner_address_street_name1)
    {
        if (!is_null($partner_address_street_name1) && (mb_strlen($partner_address_street_name1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_street_name1 when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['partner_address_street_name1'] = $partner_address_street_name1;

        return $this;
    }

    /**
     * Gets partner_address_street_name2.
     *
     * @return string|null
     */
    public function getPartnerAddressStreetName2()
    {
        return $this->container['partner_address_street_name2'];
    }

    /**
     * Sets partner_address_street_name2.
     *
     * @param string|null $partner_address_street_name2 取引先 建物名・部屋番号など
     *
     * @return self
     */
    public function setPartnerAddressStreetName2($partner_address_street_name2)
    {
        if (!is_null($partner_address_street_name2) && (mb_strlen($partner_address_street_name2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_street_name2 when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['partner_address_street_name2'] = $partner_address_street_name2;

        return $this;
    }

    /**
     * Gets partner_contact_department.
     *
     * @return string|null
     */
    public function getPartnerContactDepartment()
    {
        return $this->container['partner_contact_department'];
    }

    /**
     * Sets partner_contact_department.
     *
     * @param string|null $partner_contact_department 取引先部署
     *
     * @return self
     */
    public function setPartnerContactDepartment($partner_contact_department)
    {
        if (!is_null($partner_contact_department) && (mb_strlen($partner_contact_department) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_department when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['partner_contact_department'] = $partner_contact_department;

        return $this;
    }

    /**
     * Gets partner_contact_name.
     *
     * @return string|null
     */
    public function getPartnerContactName()
    {
        return $this->container['partner_contact_name'];
    }

    /**
     * Sets partner_contact_name.
     *
     * @param string|null $partner_contact_name 取引先担当者名
     *
     * @return self
     */
    public function setPartnerContactName($partner_contact_name)
    {
        if (!is_null($partner_contact_name) && (mb_strlen($partner_contact_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_name when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['partner_contact_name'] = $partner_contact_name;

        return $this;
    }

    /**
     * Gets partner_display_name.
     *
     * @return string|null
     */
    public function getPartnerDisplayName()
    {
        return $this->container['partner_display_name'];
    }

    /**
     * Sets partner_display_name.
     *
     * @param string|null $partner_display_name 取引先宛名 - 帳票の宛名に利用されます。
     *
     * @return self
     */
    public function setPartnerDisplayName($partner_display_name)
    {
        if (!is_null($partner_display_name) && (mb_strlen($partner_display_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_display_name when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['partner_display_name'] = $partner_display_name;

        return $this;
    }

    /**
     * Gets company_contact_name.
     *
     * @return string|null
     */
    public function getCompanyContactName()
    {
        return $this->container['company_contact_name'];
    }

    /**
     * Sets company_contact_name.
     *
     * @param string|null $company_contact_name 自社担当者名
     *
     * @return self
     */
    public function setCompanyContactName($company_contact_name)
    {
        if (!is_null($company_contact_name) && (mb_strlen($company_contact_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_contact_name when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['company_contact_name'] = $company_contact_name;

        return $this;
    }

    /**
     * Gets company_name.
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name.
     *
     * @param string|null $company_name 自社名 (上書きした場合のみ反映されます、デフォルトがテンプレートの自社名になり。)
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (!is_null($company_name) && (mb_strlen($company_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_description.
     *
     * @return string|null
     */
    public function getCompanyDescription()
    {
        return $this->container['company_description'];
    }

    /**
     * Sets company_description.
     *
     * @param string|null $company_description 自社情報 (上書きした場合のみ反映されます、デフォルトがテンプレートの自社情報になり。)
     *
     * @return self
     */
    public function setCompanyDescription($company_description)
    {
        if (!is_null($company_description) && (mb_strlen($company_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_description when calling DeliverySlipShowResponseDeliverySlip., must be smaller than or equal to 255.');
        }

        $this->container['company_description'] = $company_description;

        return $this;
    }

    /**
     * Gets template.
     *
     * @return \OpenAPI\Client\Model\DeliverySlipResponseDeliverySlipTemplate|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template.
     *
     * @param \OpenAPI\Client\Model\DeliverySlipResponseDeliverySlipTemplate|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets lines.
     *
     * @return \OpenAPI\Client\Model\DeliverySlipShowResponseDeliverySlipLines[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines.
     *
     * @param \OpenAPI\Client\Model\DeliverySlipShowResponseDeliverySlipLines[] $lines 納品書の明細行
     *
     * @return self
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets email_url_file_downloaded_at.
     *
     * @return string|null
     */
    public function getEmailUrlFileDownloadedAt()
    {
        return $this->container['email_url_file_downloaded_at'];
    }

    /**
     * Sets email_url_file_downloaded_at.
     *
     * @param string|null $email_url_file_downloaded_at URL共有で送付された送付先のメールのダウンロード時刻
     *
     * @return self
     */
    public function setEmailUrlFileDownloadedAt($email_url_file_downloaded_at)
    {

        if (!is_null($email_url_file_downloaded_at) && (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/', $email_url_file_downloaded_at))) {
            throw new \InvalidArgumentException("invalid value for $email_url_file_downloaded_at when calling DeliverySlipShowResponseDeliverySlip., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/.");
        }

        $this->container['email_url_file_downloaded_at'] = $email_url_file_downloaded_at;

        return $this;
    }

    /**
     * Gets email_url_file_downloaded_status.
     *
     * @return string|null
     */
    public function getEmailUrlFileDownloadedStatus()
    {
        return $this->container['email_url_file_downloaded_status'];
    }

    /**
     * Sets email_url_file_downloaded_status.
     *
     * @param string|null $email_url_file_downloaded_status URL共有で送付された送付先のメールのダウンロードステータス
     *
     * @return self
     */
    public function setEmailUrlFileDownloadedStatus($email_url_file_downloaded_status)
    {
        $allowedValues = $this->getEmailUrlFileDownloadedStatusAllowableValues();
        if (!is_null($email_url_file_downloaded_status) && !in_array($email_url_file_downloaded_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'email_url_file_downloaded_status', must be one of '%s'",
                    $email_url_file_downloaded_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_url_file_downloaded_status'] = $email_url_file_downloaded_status;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
