<?php

/**
 * DeliverySlipRequest.
 *
 * PHP version 7.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * freee請求書 API.
 *
 * <p>freee請求書のAPI仕様です。</p>  <b>freee請求書APIを利用するには、freee請求書への登録が必要です。  登録は<a href=\"https://www.freee.co.jp/invoice/\" target=\"_blank\">freee請求書</a>より行ってください。</b>  </br>  <h3 id=\"about_authorize\">認証について</h3>  <p>OAuth2.0を利用します。<a href=\"https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc\" target=\"_blank\">詳細はリファレンスの認証に関する記載を参照してください。</a></p>  <h3 id=\"api_endpoint\">エンドポイント</h3>  <p>https://api.freee.co.jp/iv</p>   <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"error_response\">エラーレスポンス</h3>  <p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>    <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ステータスコード</strong></th>       <th style=\"padding: 10px\"><strong>原因</strong></th>     </tr>     <tr><td style=\"padding: 10px\">400</td><td style=\"padding: 10px\">リクエストパラメータが不正</td></tr>     <tr><td style=\"padding: 10px\">401</td><td style=\"padding: 10px\">アクセストークンが無効</td></tr>     <tr><td style=\"padding: 10px\">403</td><td style=\"padding: 10px\">アクセス権限がない</td></tr>     <tr><td style=\"padding: 10px\">404</td><td style=\"padding: 10px\">リソースが存在しない</td></tr>     <tr><td style=\"padding: 10px\">429</td><td style=\"padding: 10px\">リクエスト回数制限を超えた</td></tr>     <tr><td style=\"padding: 10px\">503</td><td style=\"padding: 10px\">システム内で予期しないエラーが発生</td></tr>   </tbody> </table>  <p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p> <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;bad_request&quot;,         &quot;messages&quot; : [           &quot;リクエストの形式が不正です。&quot;         ]       }     ]   }  </code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3> <p>APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p> <pre><code>X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z </code></pre>  <br> 各ヘッダの意味は次のとおりです。</p>   <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ヘッダ名</strong></th>       <th style=\"padding: 10px\"><strong>説明</strong></th>     </tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Limit</td><td style=\"padding: 10px\">使用回数の上限</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Remaining</td><td style=\"padding: 10px\">残り使用回数</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Reset</td><td style=\"padding: 10px\">使用回数がリセットされる時刻</td></tr>   </tbody> </table>  <p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  </br>  <h3 id=\"accounting_master_items\">会計マスタ項目</h3>  <p>freee請求書APIのリクエストパラメータに、会計マスタ項目（例：<a href=\"https://developer.freee.co.jp/reference/iv/reference#operations-tag-Invoices\">POST/invoices請求書の作成</a> 取引先ID）があります。会計マスタ項目の詳細は<a href=\"https://developer.freee.co.jp/guideline/master-guideline\">会計マスタガイドラインを参照ください</a>。</p>  <p>会計のマスタ項目はfreee会計APIのエンドポイントにて取得可能です（例：<a href=\"https://developer.freee.co.jp/reference/accounting/reference#operations-tag-Partners\">Partners 取引先</a>）。freee会計APIのエンドポイントの詳細は<a href=\"https://developer.freee.co.jp/reference/accounting/reference\">会計APIリファレンスを参照ください</a>。</p>  </br>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace OpenAPI\Client\Model;

use ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * DeliverySlipRequest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DeliverySlipRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'DeliverySlipRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'company_id'                      => 'int',
        'template_id'                     => 'int',
        'delivery_slip_number'            => 'string',
        'branch_no'                       => 'int',
        'delivery_slip_date'              => '\DateTime',
        'issue_date'                      => '\DateTime',
        'subject'                         => 'string',
        'tax_entry_method'                => 'string',
        'tax_fraction'                    => 'string',
        'line_amount_fraction'            => 'string',
        'withholding_tax_entry_method'    => 'string',
        'delivery_slip_note'              => 'string',
        'memo'                            => 'string',
        'partner_id'                      => 'int',
        'partner_code'                    => 'string',
        'partner_title'                   => 'string',
        'partner_address_zipcode'         => 'string',
        'partner_address_prefecture_code' => 'int',
        'partner_address_street_name1'    => 'string',
        'partner_address_street_name2'    => 'string',
        'partner_contact_department'      => 'string',
        'partner_contact_email_cc'        => 'string',
        'partner_contact_email_to'        => 'string',
        'partner_contact_name'            => 'string',
        'partner_display_name'            => 'string',
        'company_contact_name'            => 'string',
        'company_name'                    => 'string',
        'company_description'             => 'string',
        'lines'                           => '\OpenAPI\Client\Model\DeliverySlipRequestLines[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'company_id'                      => 'int64',
        'template_id'                     => 'int64',
        'delivery_slip_number'            => null,
        'branch_no'                       => null,
        'delivery_slip_date'              => 'date',
        'issue_date'                      => 'date',
        'subject'                         => null,
        'tax_entry_method'                => null,
        'tax_fraction'                    => null,
        'line_amount_fraction'            => null,
        'withholding_tax_entry_method'    => null,
        'delivery_slip_note'              => null,
        'memo'                            => null,
        'partner_id'                      => 'int64',
        'partner_code'                    => null,
        'partner_title'                   => null,
        'partner_address_zipcode'         => null,
        'partner_address_prefecture_code' => null,
        'partner_address_street_name1'    => null,
        'partner_address_street_name2'    => null,
        'partner_contact_department'      => null,
        'partner_contact_email_cc'        => null,
        'partner_contact_email_to'        => null,
        'partner_contact_name'            => null,
        'partner_display_name'            => null,
        'company_contact_name'            => null,
        'company_name'                    => null,
        'company_description'             => null,
        'lines'                           => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_id'                      => 'company_id',
        'template_id'                     => 'template_id',
        'delivery_slip_number'            => 'delivery_slip_number',
        'branch_no'                       => 'branch_no',
        'delivery_slip_date'              => 'delivery_slip_date',
        'issue_date'                      => 'issue_date',
        'subject'                         => 'subject',
        'tax_entry_method'                => 'tax_entry_method',
        'tax_fraction'                    => 'tax_fraction',
        'line_amount_fraction'            => 'line_amount_fraction',
        'withholding_tax_entry_method'    => 'withholding_tax_entry_method',
        'delivery_slip_note'              => 'delivery_slip_note',
        'memo'                            => 'memo',
        'partner_id'                      => 'partner_id',
        'partner_code'                    => 'partner_code',
        'partner_title'                   => 'partner_title',
        'partner_address_zipcode'         => 'partner_address_zipcode',
        'partner_address_prefecture_code' => 'partner_address_prefecture_code',
        'partner_address_street_name1'    => 'partner_address_street_name1',
        'partner_address_street_name2'    => 'partner_address_street_name2',
        'partner_contact_department'      => 'partner_contact_department',
        'partner_contact_email_cc'        => 'partner_contact_email_cc',
        'partner_contact_email_to'        => 'partner_contact_email_to',
        'partner_contact_name'            => 'partner_contact_name',
        'partner_display_name'            => 'partner_display_name',
        'company_contact_name'            => 'company_contact_name',
        'company_name'                    => 'company_name',
        'company_description'             => 'company_description',
        'lines'                           => 'lines',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'company_id'                      => 'setCompanyId',
        'template_id'                     => 'setTemplateId',
        'delivery_slip_number'            => 'setDeliverySlipNumber',
        'branch_no'                       => 'setBranchNo',
        'delivery_slip_date'              => 'setDeliverySlipDate',
        'issue_date'                      => 'setIssueDate',
        'subject'                         => 'setSubject',
        'tax_entry_method'                => 'setTaxEntryMethod',
        'tax_fraction'                    => 'setTaxFraction',
        'line_amount_fraction'            => 'setLineAmountFraction',
        'withholding_tax_entry_method'    => 'setWithholdingTaxEntryMethod',
        'delivery_slip_note'              => 'setDeliverySlipNote',
        'memo'                            => 'setMemo',
        'partner_id'                      => 'setPartnerId',
        'partner_code'                    => 'setPartnerCode',
        'partner_title'                   => 'setPartnerTitle',
        'partner_address_zipcode'         => 'setPartnerAddressZipcode',
        'partner_address_prefecture_code' => 'setPartnerAddressPrefectureCode',
        'partner_address_street_name1'    => 'setPartnerAddressStreetName1',
        'partner_address_street_name2'    => 'setPartnerAddressStreetName2',
        'partner_contact_department'      => 'setPartnerContactDepartment',
        'partner_contact_email_cc'        => 'setPartnerContactEmailCc',
        'partner_contact_email_to'        => 'setPartnerContactEmailTo',
        'partner_contact_name'            => 'setPartnerContactName',
        'partner_display_name'            => 'setPartnerDisplayName',
        'company_contact_name'            => 'setCompanyContactName',
        'company_name'                    => 'setCompanyName',
        'company_description'             => 'setCompanyDescription',
        'lines'                           => 'setLines',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'company_id'                      => 'getCompanyId',
        'template_id'                     => 'getTemplateId',
        'delivery_slip_number'            => 'getDeliverySlipNumber',
        'branch_no'                       => 'getBranchNo',
        'delivery_slip_date'              => 'getDeliverySlipDate',
        'issue_date'                      => 'getIssueDate',
        'subject'                         => 'getSubject',
        'tax_entry_method'                => 'getTaxEntryMethod',
        'tax_fraction'                    => 'getTaxFraction',
        'line_amount_fraction'            => 'getLineAmountFraction',
        'withholding_tax_entry_method'    => 'getWithholdingTaxEntryMethod',
        'delivery_slip_note'              => 'getDeliverySlipNote',
        'memo'                            => 'getMemo',
        'partner_id'                      => 'getPartnerId',
        'partner_code'                    => 'getPartnerCode',
        'partner_title'                   => 'getPartnerTitle',
        'partner_address_zipcode'         => 'getPartnerAddressZipcode',
        'partner_address_prefecture_code' => 'getPartnerAddressPrefectureCode',
        'partner_address_street_name1'    => 'getPartnerAddressStreetName1',
        'partner_address_street_name2'    => 'getPartnerAddressStreetName2',
        'partner_contact_department'      => 'getPartnerContactDepartment',
        'partner_contact_email_cc'        => 'getPartnerContactEmailCc',
        'partner_contact_email_to'        => 'getPartnerContactEmailTo',
        'partner_contact_name'            => 'getPartnerContactName',
        'partner_display_name'            => 'getPartnerDisplayName',
        'company_contact_name'            => 'getCompanyContactName',
        'company_name'                    => 'getCompanyName',
        'company_description'             => 'getCompanyDescription',
        'lines'                           => 'getLines',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TAX_ENTRY_METHOD_IN              = 'in';
    const TAX_ENTRY_METHOD_OUT             = 'out';
    const TAX_FRACTION_OMIT                = 'omit';
    const TAX_FRACTION_ROUND_UP            = 'round_up';
    const TAX_FRACTION_ROUND               = 'round';
    const LINE_AMOUNT_FRACTION_OMIT        = 'omit';
    const LINE_AMOUNT_FRACTION_ROUND_UP    = 'round_up';
    const LINE_AMOUNT_FRACTION_ROUND       = 'round';
    const WITHHOLDING_TAX_ENTRY_METHOD_IN  = 'in';
    const WITHHOLDING_TAX_ENTRY_METHOD_OUT = 'out';
    const PARTNER_TITLE_                   = '御中';
    const PARTNER_TITLE_                   = '様';
    const PARTNER_TITLE_                   = '(空白)';
    const PARTNER_TITLE_                   = '（空白）';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTaxEntryMethodAllowableValues()
    {
        return [
            self::TAX_ENTRY_METHOD_IN,
            self::TAX_ENTRY_METHOD_OUT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getTaxFractionAllowableValues()
    {
        return [
            self::TAX_FRACTION_OMIT,
            self::TAX_FRACTION_ROUND_UP,
            self::TAX_FRACTION_ROUND,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getLineAmountFractionAllowableValues()
    {
        return [
            self::LINE_AMOUNT_FRACTION_OMIT,
            self::LINE_AMOUNT_FRACTION_ROUND_UP,
            self::LINE_AMOUNT_FRACTION_ROUND,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getWithholdingTaxEntryMethodAllowableValues()
    {
        return [
            self::WITHHOLDING_TAX_ENTRY_METHOD_IN,
            self::WITHHOLDING_TAX_ENTRY_METHOD_OUT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPartnerTitleAllowableValues()
    {
        return [
            self::PARTNER_TITLE_,
            self::PARTNER_TITLE_,
            self::PARTNER_TITLE_,
            self::PARTNER_TITLE_,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_id']                      = $data['company_id'] ?? null;
        $this->container['template_id']                     = $data['template_id'] ?? null;
        $this->container['delivery_slip_number']            = $data['delivery_slip_number'] ?? null;
        $this->container['branch_no']                       = $data['branch_no'] ?? null;
        $this->container['delivery_slip_date']              = $data['delivery_slip_date'] ?? null;
        $this->container['issue_date']                      = $data['issue_date'] ?? null;
        $this->container['subject']                         = $data['subject'] ?? null;
        $this->container['tax_entry_method']                = $data['tax_entry_method'] ?? null;
        $this->container['tax_fraction']                    = $data['tax_fraction'] ?? null;
        $this->container['line_amount_fraction']            = $data['line_amount_fraction'] ?? null;
        $this->container['withholding_tax_entry_method']    = $data['withholding_tax_entry_method'] ?? null;
        $this->container['delivery_slip_note']              = $data['delivery_slip_note'] ?? null;
        $this->container['memo']                            = $data['memo'] ?? null;
        $this->container['partner_id']                      = $data['partner_id'] ?? null;
        $this->container['partner_code']                    = $data['partner_code'] ?? null;
        $this->container['partner_title']                   = $data['partner_title'] ?? null;
        $this->container['partner_address_zipcode']         = $data['partner_address_zipcode'] ?? null;
        $this->container['partner_address_prefecture_code'] = $data['partner_address_prefecture_code'] ?? null;
        $this->container['partner_address_street_name1']    = $data['partner_address_street_name1'] ?? null;
        $this->container['partner_address_street_name2']    = $data['partner_address_street_name2'] ?? null;
        $this->container['partner_contact_department']      = $data['partner_contact_department'] ?? null;
        $this->container['partner_contact_email_cc']        = $data['partner_contact_email_cc'] ?? null;
        $this->container['partner_contact_email_to']        = $data['partner_contact_email_to'] ?? null;
        $this->container['partner_contact_name']            = $data['partner_contact_name'] ?? null;
        $this->container['partner_display_name']            = $data['partner_display_name'] ?? null;
        $this->container['company_contact_name']            = $data['company_contact_name'] ?? null;
        $this->container['company_name']                    = $data['company_name'] ?? null;
        $this->container['company_description']             = $data['company_description'] ?? null;
        $this->container['lines']                           = $data['lines'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if (($this->container['company_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'company_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['company_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'company_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['template_id']) && ($this->container['template_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'template_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['template_id']) && ($this->container['template_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'template_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['delivery_slip_number']) && (mb_strlen($this->container['delivery_slip_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'delivery_slip_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['branch_no']) && ($this->container['branch_no'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'branch_no', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['branch_no']) && ($this->container['branch_no'] < 0)) {
            $invalidProperties[] = "invalid value for 'branch_no', must be bigger than or equal to 0.";
        }

        if ($this->container['delivery_slip_date'] === null) {
            $invalidProperties[] = "'delivery_slip_date' can't be null";
        }
        if (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['delivery_slip_date'])) {
            $invalidProperties[] = "invalid value for 'delivery_slip_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (!is_null($this->container['issue_date']) && !preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['issue_date'])) {
            $invalidProperties[] = "invalid value for 'issue_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 255)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) < 1)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tax_entry_method'] === null) {
            $invalidProperties[] = "'tax_entry_method' can't be null";
        }
        $allowedValues = $this->getTaxEntryMethodAllowableValues();
        if (!is_null($this->container['tax_entry_method']) && !in_array($this->container['tax_entry_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_entry_method', must be one of '%s'",
                $this->container['tax_entry_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tax_fraction'] === null) {
            $invalidProperties[] = "'tax_fraction' can't be null";
        }
        $allowedValues = $this->getTaxFractionAllowableValues();
        if (!is_null($this->container['tax_fraction']) && !in_array($this->container['tax_fraction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_fraction', must be one of '%s'",
                $this->container['tax_fraction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLineAmountFractionAllowableValues();
        if (!is_null($this->container['line_amount_fraction']) && !in_array($this->container['line_amount_fraction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'line_amount_fraction', must be one of '%s'",
                $this->container['line_amount_fraction'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['withholding_tax_entry_method'] === null) {
            $invalidProperties[] = "'withholding_tax_entry_method' can't be null";
        }
        $allowedValues = $this->getWithholdingTaxEntryMethodAllowableValues();
        if (!is_null($this->container['withholding_tax_entry_method']) && !in_array($this->container['withholding_tax_entry_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'withholding_tax_entry_method', must be one of '%s'",
                $this->container['withholding_tax_entry_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['delivery_slip_note']) && (mb_strlen($this->container['delivery_slip_note']) > 4000)) {
            $invalidProperties[] = "invalid value for 'delivery_slip_note', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['delivery_slip_note']) && (mb_strlen($this->container['delivery_slip_note']) < 1)) {
            $invalidProperties[] = "invalid value for 'delivery_slip_note', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) > 2000)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) < 1)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_id']) && ($this->container['partner_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'partner_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['partner_id']) && ($this->container['partner_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'partner_id', must be bigger than or equal to 1.";
        }

        if ($this->container['partner_title'] === null) {
            $invalidProperties[] = "'partner_title' can't be null";
        }
        $allowedValues = $this->getPartnerTitleAllowableValues();
        if (!is_null($this->container['partner_title']) && !in_array($this->container['partner_title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partner_title', must be one of '%s'",
                $this->container['partner_title'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['partner_address_zipcode']) && (mb_strlen($this->container['partner_address_zipcode']) > 10)) {
            $invalidProperties[] = "invalid value for 'partner_address_zipcode', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['partner_address_zipcode']) && (mb_strlen($this->container['partner_address_zipcode']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_address_zipcode', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_address_zipcode']) && !preg_match('/^[0-9]{3}[\\-]?[0-9]{4}$/', $this->container['partner_address_zipcode'])) {
            $invalidProperties[] = "invalid value for 'partner_address_zipcode', must be conform to the pattern /^[0-9]{3}[\\-]?[0-9]{4}$/.";
        }

        if (!is_null($this->container['partner_address_prefecture_code']) && ($this->container['partner_address_prefecture_code'] > 46)) {
            $invalidProperties[] = "invalid value for 'partner_address_prefecture_code', must be smaller than or equal to 46.";
        }

        if (!is_null($this->container['partner_address_prefecture_code']) && ($this->container['partner_address_prefecture_code'] < -1)) {
            $invalidProperties[] = "invalid value for 'partner_address_prefecture_code', must be bigger than or equal to -1.";
        }

        if (!is_null($this->container['partner_address_street_name1']) && (mb_strlen($this->container['partner_address_street_name1']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_address_street_name1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_address_street_name1']) && (mb_strlen($this->container['partner_address_street_name1']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_address_street_name1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_address_street_name2']) && (mb_strlen($this->container['partner_address_street_name2']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_address_street_name2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_address_street_name2']) && (mb_strlen($this->container['partner_address_street_name2']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_address_street_name2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_contact_department']) && (mb_strlen($this->container['partner_contact_department']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_contact_department', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_contact_department']) && (mb_strlen($this->container['partner_contact_department']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_contact_department', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_contact_email_cc']) && (mb_strlen($this->container['partner_contact_email_cc']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_contact_email_cc', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_contact_email_cc']) && (mb_strlen($this->container['partner_contact_email_cc']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_contact_email_cc', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_contact_email_to']) && (mb_strlen($this->container['partner_contact_email_to']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_contact_email_to', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_contact_email_to']) && (mb_strlen($this->container['partner_contact_email_to']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_contact_email_to', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_contact_name']) && (mb_strlen($this->container['partner_contact_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_contact_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_contact_name']) && (mb_strlen($this->container['partner_contact_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'partner_contact_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_display_name']) && (mb_strlen($this->container['partner_display_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_display_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_contact_name']) && (mb_strlen($this->container['company_contact_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_contact_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_description']) && (mb_strlen($this->container['company_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['lines'] === null) {
            $invalidProperties[] = "'lines' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_id.
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id.
     *
     * @param int $company_id 事業所ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {

        if (($company_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling DeliverySlipRequest., must be smaller than or equal to 9223372036854775807.');
        }
        if (($company_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets template_id.
     *
     * @return int|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id.
     *
     * @param int|null $template_id 帳票テンプレートID（指定しない場合、事業所の既定のテンプレートが指定されます。）
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {

        if (!is_null($template_id) && ($template_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling DeliverySlipRequest., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($template_id) && ($template_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets delivery_slip_number.
     *
     * @return string|null
     */
    public function getDeliverySlipNumber()
    {
        return $this->container['delivery_slip_number'];
    }

    /**
     * Sets delivery_slip_number.
     *
     * @param string|null $delivery_slip_number 納品書番号<br> - 採番の設定が、[自動採番する]の場合、指定できません。 - 採番の設定が、[自動採番する]以外の場合、必須になります。
     *
     * @return self
     */
    public function setDeliverySlipNumber($delivery_slip_number)
    {
        if (!is_null($delivery_slip_number) && (mb_strlen($delivery_slip_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $delivery_slip_number when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }

        $this->container['delivery_slip_number'] = $delivery_slip_number;

        return $this;
    }

    /**
     * Gets branch_no.
     *
     * @return int|null
     */
    public function getBranchNo()
    {
        return $this->container['branch_no'];
    }

    /**
     * Sets branch_no.
     *
     * @param int|null $branch_no 枝番
     *
     * @return self
     */
    public function setBranchNo($branch_no)
    {

        if (!is_null($branch_no) && ($branch_no > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $branch_no when calling DeliverySlipRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($branch_no) && ($branch_no < 0)) {
            throw new \InvalidArgumentException('invalid value for $branch_no when calling DeliverySlipRequest., must be bigger than or equal to 0.');
        }

        $this->container['branch_no'] = $branch_no;

        return $this;
    }

    /**
     * Gets delivery_slip_date.
     *
     * @return \DateTime
     */
    public function getDeliverySlipDate()
    {
        return $this->container['delivery_slip_date'];
    }

    /**
     * Sets delivery_slip_date.
     *
     * @param \DateTime $delivery_slip_date 納品日
     *
     * @return self
     */
    public function setDeliverySlipDate($delivery_slip_date)
    {

        if ((!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $delivery_slip_date))) {
            throw new \InvalidArgumentException("invalid value for $delivery_slip_date when calling DeliverySlipRequest., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['delivery_slip_date'] = $delivery_slip_date;

        return $this;
    }

    /**
     * Gets issue_date.
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date.
     *
     * @param \DateTime|null $issue_date 発生日（取引登録の下書き保存で利用されます。） - 入力がない場合、納品日が補完されます。
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {

        if (!is_null($issue_date) && (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $issue_date))) {
            throw new \InvalidArgumentException("invalid value for $issue_date when calling DeliverySlipRequest., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets subject.
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject.
     *
     * @param string|null $subject 件名
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 255)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($subject) && (mb_strlen($subject) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets tax_entry_method.
     *
     * @return string
     */
    public function getTaxEntryMethod()
    {
        return $this->container['tax_entry_method'];
    }

    /**
     * Sets tax_entry_method.
     *
     * @param string $tax_entry_method 消費税の内税・外税区分（in: 税込表示（内税）、out: 税別表示（外税））
     *
     * @return self
     */
    public function setTaxEntryMethod($tax_entry_method)
    {
        $allowedValues = $this->getTaxEntryMethodAllowableValues();
        if (!in_array($tax_entry_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_entry_method', must be one of '%s'",
                    $tax_entry_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_entry_method'] = $tax_entry_method;

        return $this;
    }

    /**
     * Gets tax_fraction.
     *
     * @return string
     */
    public function getTaxFraction()
    {
        return $this->container['tax_fraction'];
    }

    /**
     * Sets tax_fraction.
     *
     * @param string $tax_fraction 消費税端数の計算方法（omit: 切り捨て、round_up: 切り上げ、round: 四捨五入）
     *
     * @return self
     */
    public function setTaxFraction($tax_fraction)
    {
        $allowedValues = $this->getTaxFractionAllowableValues();
        if (!in_array($tax_fraction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_fraction', must be one of '%s'",
                    $tax_fraction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_fraction'] = $tax_fraction;

        return $this;
    }

    /**
     * Gets line_amount_fraction.
     *
     * @return string|null
     */
    public function getLineAmountFraction()
    {
        return $this->container['line_amount_fraction'];
    }

    /**
     * Sets line_amount_fraction.
     *
     * @param string|null $line_amount_fraction 金額端数の計算方法（omit: 切り捨て、round_up: 切り上げ、round: 四捨五入）
     *
     * @return self
     */
    public function setLineAmountFraction($line_amount_fraction)
    {
        $allowedValues = $this->getLineAmountFractionAllowableValues();
        if (!is_null($line_amount_fraction) && !in_array($line_amount_fraction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'line_amount_fraction', must be one of '%s'",
                    $line_amount_fraction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_amount_fraction'] = $line_amount_fraction;

        return $this;
    }

    /**
     * Gets withholding_tax_entry_method.
     *
     * @return string
     */
    public function getWithholdingTaxEntryMethod()
    {
        return $this->container['withholding_tax_entry_method'];
    }

    /**
     * Sets withholding_tax_entry_method.
     *
     * @param string $withholding_tax_entry_method 源泉徴収の計算方法（in: 税込み価格で計算、out: 税別価格で計算）
     *
     * @return self
     */
    public function setWithholdingTaxEntryMethod($withholding_tax_entry_method)
    {
        $allowedValues = $this->getWithholdingTaxEntryMethodAllowableValues();
        if (!in_array($withholding_tax_entry_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'withholding_tax_entry_method', must be one of '%s'",
                    $withholding_tax_entry_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['withholding_tax_entry_method'] = $withholding_tax_entry_method;

        return $this;
    }

    /**
     * Gets delivery_slip_note.
     *
     * @return string|null
     */
    public function getDeliverySlipNote()
    {
        return $this->container['delivery_slip_note'];
    }

    /**
     * Sets delivery_slip_note.
     *
     * @param string|null $delivery_slip_note 備考
     *
     * @return self
     */
    public function setDeliverySlipNote($delivery_slip_note)
    {
        if (!is_null($delivery_slip_note) && (mb_strlen($delivery_slip_note) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $delivery_slip_note when calling DeliverySlipRequest., must be smaller than or equal to 4000.');
        }
        if (!is_null($delivery_slip_note) && (mb_strlen($delivery_slip_note) < 1)) {
            throw new \InvalidArgumentException('invalid length for $delivery_slip_note when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['delivery_slip_note'] = $delivery_slip_note;

        return $this;
    }

    /**
     * Gets memo.
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo.
     *
     * @param string|null $memo 社内メモ
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (!is_null($memo) && (mb_strlen($memo) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling DeliverySlipRequest., must be smaller than or equal to 2000.');
        }
        if (!is_null($memo) && (mb_strlen($memo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets partner_id.
     *
     * @return int|null
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id.
     *
     * @param int|null $partner_id 取引先ID<br> 取引先IDと取引先コードはどちらか一方を必ず指定してください。<br> <a href='https://support.freee.co.jp/hc/ja/articles/12515437008409-取引先を登録する#:~:text=確認ください。-,取引先役割,-種別' target='_blank'>取引先役割に関してはヘルプページを御覧ください。</a>
     *
     * @return self
     */
    public function setPartnerId($partner_id)
    {

        if (!is_null($partner_id) && ($partner_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $partner_id when calling DeliverySlipRequest., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($partner_id) && ($partner_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $partner_id when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets partner_code.
     *
     * @return string|null
     */
    public function getPartnerCode()
    {
        return $this->container['partner_code'];
    }

    /**
     * Sets partner_code.
     *
     * @param string|null $partner_code 取引先コード<br> 取引先コードと取引先IDはどちらか一方を必ず指定してください。<br> <a href='https://support.freee.co.jp/hc/ja/articles/12515437008409-取引先を登録する#:~:text=確認ください。-,取引先役割,-種別' target='_blank'>取引先役割に関してはヘルプページを御覧ください。</a>
     *
     * @return self
     */
    public function setPartnerCode($partner_code)
    {
        $this->container['partner_code'] = $partner_code;

        return $this;
    }

    /**
     * Gets partner_title.
     *
     * @return string
     */
    public function getPartnerTitle()
    {
        return $this->container['partner_title'];
    }

    /**
     * Sets partner_title.
     *
     * @param string $partner_title 敬称（御中、様、(空白)の3つから選択） - [非推奨]全角カッコの（空白）は削除予定です。 - 全角カッコの（空白）を指定した場合、はレスポンスは、半角カッコの(空白)になります。
     *
     * @return self
     */
    public function setPartnerTitle($partner_title)
    {
        $allowedValues = $this->getPartnerTitleAllowableValues();
        if (!in_array($partner_title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partner_title', must be one of '%s'",
                    $partner_title,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partner_title'] = $partner_title;

        return $this;
    }

    /**
     * Gets partner_address_zipcode.
     *
     * @return string|null
     */
    public function getPartnerAddressZipcode()
    {
        return $this->container['partner_address_zipcode'];
    }

    /**
     * Sets partner_address_zipcode.
     *
     * @param string|null $partner_address_zipcode 郵便番号 - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく郵便番号が利用されます。
     *
     * @return self
     */
    public function setPartnerAddressZipcode($partner_address_zipcode)
    {
        if (!is_null($partner_address_zipcode) && (mb_strlen($partner_address_zipcode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_zipcode when calling DeliverySlipRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($partner_address_zipcode) && (mb_strlen($partner_address_zipcode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_zipcode when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }
        if (!is_null($partner_address_zipcode) && (!preg_match('/^[0-9]{3}[\\-]?[0-9]{4}$/', $partner_address_zipcode))) {
            throw new \InvalidArgumentException("invalid value for $partner_address_zipcode when calling DeliverySlipRequest., must conform to the pattern /^[0-9]{3}[\\-]?[0-9]{4}$/.");
        }

        $this->container['partner_address_zipcode'] = $partner_address_zipcode;

        return $this;
    }

    /**
     * Gets partner_address_prefecture_code.
     *
     * @return int|null
     */
    public function getPartnerAddressPrefectureCode()
    {
        return $this->container['partner_address_prefecture_code'];
    }

    /**
     * Sets partner_address_prefecture_code.
     *
     * @param int|null $partner_address_prefecture_code 都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄） - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく都道府県コードが利用されます。
     *
     * @return self
     */
    public function setPartnerAddressPrefectureCode($partner_address_prefecture_code)
    {

        if (!is_null($partner_address_prefecture_code) && ($partner_address_prefecture_code > 46)) {
            throw new \InvalidArgumentException('invalid value for $partner_address_prefecture_code when calling DeliverySlipRequest., must be smaller than or equal to 46.');
        }
        if (!is_null($partner_address_prefecture_code) && ($partner_address_prefecture_code < -1)) {
            throw new \InvalidArgumentException('invalid value for $partner_address_prefecture_code when calling DeliverySlipRequest., must be bigger than or equal to -1.');
        }

        $this->container['partner_address_prefecture_code'] = $partner_address_prefecture_code;

        return $this;
    }

    /**
     * Gets partner_address_street_name1.
     *
     * @return string|null
     */
    public function getPartnerAddressStreetName1()
    {
        return $this->container['partner_address_street_name1'];
    }

    /**
     * Sets partner_address_street_name1.
     *
     * @param string|null $partner_address_street_name1 取引先 市区町村・番地 - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく取引先 市区町村・番地が利用されます。
     *
     * @return self
     */
    public function setPartnerAddressStreetName1($partner_address_street_name1)
    {
        if (!is_null($partner_address_street_name1) && (mb_strlen($partner_address_street_name1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_street_name1 when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($partner_address_street_name1) && (mb_strlen($partner_address_street_name1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_street_name1 when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['partner_address_street_name1'] = $partner_address_street_name1;

        return $this;
    }

    /**
     * Gets partner_address_street_name2.
     *
     * @return string|null
     */
    public function getPartnerAddressStreetName2()
    {
        return $this->container['partner_address_street_name2'];
    }

    /**
     * Sets partner_address_street_name2.
     *
     * @param string|null $partner_address_street_name2 取引先 建物名・部屋番号など - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく取引先 建物名・部屋番号などが利用されます。
     *
     * @return self
     */
    public function setPartnerAddressStreetName2($partner_address_street_name2)
    {
        if (!is_null($partner_address_street_name2) && (mb_strlen($partner_address_street_name2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_street_name2 when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($partner_address_street_name2) && (mb_strlen($partner_address_street_name2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_address_street_name2 when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['partner_address_street_name2'] = $partner_address_street_name2;

        return $this;
    }

    /**
     * Gets partner_contact_department.
     *
     * @return string|null
     */
    public function getPartnerContactDepartment()
    {
        return $this->container['partner_contact_department'];
    }

    /**
     * Sets partner_contact_department.
     *
     * @param string|null $partner_contact_department 取引先部署 - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく取引先部署が利用されます。
     *
     * @return self
     */
    public function setPartnerContactDepartment($partner_contact_department)
    {
        if (!is_null($partner_contact_department) && (mb_strlen($partner_contact_department) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_department when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($partner_contact_department) && (mb_strlen($partner_contact_department) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_department when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['partner_contact_department'] = $partner_contact_department;

        return $this;
    }

    /**
     * Gets partner_contact_email_cc.
     *
     * @return string|null
     */
    public function getPartnerContactEmailCc()
    {
        return $this->container['partner_contact_email_cc'];
    }

    /**
     * Sets partner_contact_email_cc.
     *
     * @param string|null $partner_contact_email_cc 取引先担当者メールアドレス（CC） - 入力がない場合、メールテンプレートに指定されたCCが利用されます。 - カンマ区切りで複数メールアドレスに送付可能です。
     *
     * @return self
     */
    public function setPartnerContactEmailCc($partner_contact_email_cc)
    {
        if (!is_null($partner_contact_email_cc) && (mb_strlen($partner_contact_email_cc) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_email_cc when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($partner_contact_email_cc) && (mb_strlen($partner_contact_email_cc) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_email_cc when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['partner_contact_email_cc'] = $partner_contact_email_cc;

        return $this;
    }

    /**
     * Gets partner_contact_email_to.
     *
     * @return string|null
     */
    public function getPartnerContactEmailTo()
    {
        return $this->container['partner_contact_email_to'];
    }

    /**
     * Sets partner_contact_email_to.
     *
     * @param string|null $partner_contact_email_to 取引先担当者メールアドレス（TO） - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく取引先担当者メールアドレスが利用されます。 - カンマ区切りで複数メールアドレスに送付可能です。
     *
     * @return self
     */
    public function setPartnerContactEmailTo($partner_contact_email_to)
    {
        if (!is_null($partner_contact_email_to) && (mb_strlen($partner_contact_email_to) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_email_to when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($partner_contact_email_to) && (mb_strlen($partner_contact_email_to) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_email_to when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['partner_contact_email_to'] = $partner_contact_email_to;

        return $this;
    }

    /**
     * Gets partner_contact_name.
     *
     * @return string|null
     */
    public function getPartnerContactName()
    {
        return $this->container['partner_contact_name'];
    }

    /**
     * Sets partner_contact_name.
     *
     * @param string|null $partner_contact_name 取引先担当者名 - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく取引先担当者名が利用されます。
     *
     * @return self
     */
    public function setPartnerContactName($partner_contact_name)
    {
        if (!is_null($partner_contact_name) && (mb_strlen($partner_contact_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_name when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }
        if (!is_null($partner_contact_name) && (mb_strlen($partner_contact_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $partner_contact_name when calling DeliverySlipRequest., must be bigger than or equal to 1.');
        }

        $this->container['partner_contact_name'] = $partner_contact_name;

        return $this;
    }

    /**
     * Gets partner_display_name.
     *
     * @return string|null
     */
    public function getPartnerDisplayName()
    {
        return $this->container['partner_display_name'];
    }

    /**
     * Sets partner_display_name.
     *
     * @param string|null $partner_display_name 取引先宛名 - 帳票の宛名に利用されます。 - 入力がない場合、帳票に指定されたpartner_id, partner_codeに紐づく取引先名称が利用されます。
     *
     * @return self
     */
    public function setPartnerDisplayName($partner_display_name)
    {
        if (!is_null($partner_display_name) && (mb_strlen($partner_display_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_display_name when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }

        $this->container['partner_display_name'] = $partner_display_name;

        return $this;
    }

    /**
     * Gets company_contact_name.
     *
     * @return string|null
     */
    public function getCompanyContactName()
    {
        return $this->container['company_contact_name'];
    }

    /**
     * Sets company_contact_name.
     *
     * @param string|null $company_contact_name 自社担当者(デフォルトは表示ユーザー名が補完されます)
     *
     * @return self
     */
    public function setCompanyContactName($company_contact_name)
    {
        if (!is_null($company_contact_name) && (mb_strlen($company_contact_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_contact_name when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }

        $this->container['company_contact_name'] = $company_contact_name;

        return $this;
    }

    /**
     * Gets company_name.
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name.
     *
     * @param string|null $company_name 自社名を上書きする場合に指定します。
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (!is_null($company_name) && (mb_strlen($company_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_description.
     *
     * @return string|null
     */
    public function getCompanyDescription()
    {
        return $this->container['company_description'];
    }

    /**
     * Sets company_description.
     *
     * @param string|null $company_description 自社説明を上書きする場合に指定します。
     *
     * @return self
     */
    public function setCompanyDescription($company_description)
    {
        if (!is_null($company_description) && (mb_strlen($company_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_description when calling DeliverySlipRequest., must be smaller than or equal to 255.');
        }

        $this->container['company_description'] = $company_description;

        return $this;
    }

    /**
     * Gets lines.
     *
     * @return \OpenAPI\Client\Model\DeliverySlipRequestLines[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines.
     *
     * @param \OpenAPI\Client\Model\DeliverySlipRequestLines[] $lines 納品書の明細行
     *
     * @return self
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
