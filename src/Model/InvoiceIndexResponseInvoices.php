<?php

/**
 * InvoiceIndexResponseInvoices.
 *
 * PHP version 7.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * freee請求書 API.
 *
 * <p>freee請求書のAPI仕様です。</p>  <b>freee請求書APIを利用するには、freee請求書への登録が必要です。  登録は<a href=\"https://www.freee.co.jp/invoice/\" target=\"_blank\">freee請求書</a>より行ってください。</b>  </br>  <h3 id=\"about_authorize\">認証について</h3>  <p>OAuth2.0を利用します。<a href=\"https://developer.freee.co.jp/reference/#%e8%aa%8d%e8%a8%bc\" target=\"_blank\">詳細はリファレンスの認証に関する記載を参照してください。</a></p>  <h3 id=\"api_endpoint\">エンドポイント</h3>  <p>https://api.freee.co.jp/iv</p>   <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"error_response\">エラーレスポンス</h3>  <p>APIリクエストでエラーが発生した場合は、エラー原因に応じたステータスコードおよびメッセージを返します。</p>    <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ステータスコード</strong></th>       <th style=\"padding: 10px\"><strong>原因</strong></th>     </tr>     <tr><td style=\"padding: 10px\">400</td><td style=\"padding: 10px\">リクエストパラメータが不正</td></tr>     <tr><td style=\"padding: 10px\">401</td><td style=\"padding: 10px\">アクセストークンが無効</td></tr>     <tr><td style=\"padding: 10px\">403</td><td style=\"padding: 10px\">アクセス権限がない</td></tr>     <tr><td style=\"padding: 10px\">404</td><td style=\"padding: 10px\">リソースが存在しない</td></tr>     <tr><td style=\"padding: 10px\">429</td><td style=\"padding: 10px\">リクエスト回数制限を超えた</td></tr>     <tr><td style=\"padding: 10px\">503</td><td style=\"padding: 10px\">システム内で予期しないエラーが発生</td></tr>   </tbody> </table>  <p>メッセージボディ内の <code>messages</code> にはエラー内容を説明する文字列が入ります。</p> <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;bad_request&quot;,         &quot;messages&quot; : [           &quot;リクエストの形式が不正です。&quot;         ]       }     ]   }  </code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3> <p>APIリクエストは1時間で5000回を上限としています。API使用ステータスはレスポンスヘッダに付与されます。</p> <pre><code>X-Ratelimit-Limit:5000 X-Ratelimit-Remaining:4998 X-Ratelimit-Reset:2018-01-01T12:00:00.000000Z </code></pre>  <br> 各ヘッダの意味は次のとおりです。</p>   <table border=\"1\">   <tbody>     <tr>       <th style=\"padding: 10px\"><strong>ヘッダ名</strong></th>       <th style=\"padding: 10px\"><strong>説明</strong></th>     </tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Limit</td><td style=\"padding: 10px\">使用回数の上限</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Remaining</td><td style=\"padding: 10px\">残り使用回数</td></tr>     <tr><td style=\"padding: 10px\">X-RateLimit-Reset</td><td style=\"padding: 10px\">使用回数がリセットされる時刻</td></tr>   </tbody> </table>  <p>上記に加え、freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。<br> その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  </br>  <h3 id=\"accounting_master_items\">会計マスタ項目</h3>  <p>freee請求書APIのリクエストパラメータに、会計マスタ項目（例：<a href=\"https://developer.freee.co.jp/reference/iv/reference#operations-tag-Invoices\">POST/invoices請求書の作成</a> 取引先ID）があります。会計マスタ項目の詳細は<a href=\"https://developer.freee.co.jp/guideline/master-guideline\">会計マスタガイドラインを参照ください</a>。</p>  <p>会計のマスタ項目はfreee会計APIのエンドポイントにて取得可能です（例：<a href=\"https://developer.freee.co.jp/reference/accounting/reference#operations-tag-Partners\">Partners 取引先</a>）。freee会計APIのエンドポイントの詳細は<a href=\"https://developer.freee.co.jp/reference/accounting/reference\">会計APIリファレンスを参照ください</a>。</p>  </br>
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace OpenAPI\Client\Model;

use ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceIndexResponseInvoices Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InvoiceIndexResponseInvoices implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'InvoiceIndexResponse_invoices';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'id'                               => 'int',
        'company_id'                       => 'int',
        'invoice_number'                   => 'string',
        'subject'                          => 'string',
        'template_id'                      => 'int',
        'billing_date'                     => '\DateTime',
        'issue_date'                       => '\DateTime',
        'payment_date'                     => '\DateTime',
        'payment_type'                     => 'string',
        'memo'                             => 'string',
        'sending_status'                   => 'string',
        'payment_status'                   => 'string',
        'cancel_status'                    => 'string',
        'deal_status'                      => 'string',
        'deal_id'                          => 'int',
        'total_amount'                     => 'double',
        'amount_withholding_tax'           => 'float',
        'amount_including_tax'             => 'double',
        'amount_excluding_tax'             => 'float',
        'amount_tax'                       => 'float',
        'amount_brought_forward'           => 'double',
        'partner_id'                       => 'int',
        'partner_code'                     => 'string',
        'partner_name'                     => 'string',
        'partner_display_name'             => 'string',
        'company_contact_name'             => 'string',
        'email_url_file_downloaded_at'     => 'string',
        'email_url_file_downloaded_status' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'id'                               => 'int64',
        'company_id'                       => 'int64',
        'invoice_number'                   => null,
        'subject'                          => null,
        'template_id'                      => 'int64',
        'billing_date'                     => 'date',
        'issue_date'                       => 'date',
        'payment_date'                     => 'date',
        'payment_type'                     => null,
        'memo'                             => null,
        'sending_status'                   => null,
        'payment_status'                   => null,
        'cancel_status'                    => null,
        'deal_status'                      => null,
        'deal_id'                          => 'int64',
        'total_amount'                     => 'double',
        'amount_withholding_tax'           => null,
        'amount_including_tax'             => 'double',
        'amount_excluding_tax'             => null,
        'amount_tax'                       => null,
        'amount_brought_forward'           => 'double',
        'partner_id'                       => 'int64',
        'partner_code'                     => null,
        'partner_name'                     => null,
        'partner_display_name'             => null,
        'company_contact_name'             => null,
        'email_url_file_downloaded_at'     => 'string',
        'email_url_file_downloaded_status' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id'                               => 'id',
        'company_id'                       => 'company_id',
        'invoice_number'                   => 'invoice_number',
        'subject'                          => 'subject',
        'template_id'                      => 'template_id',
        'billing_date'                     => 'billing_date',
        'issue_date'                       => 'issue_date',
        'payment_date'                     => 'payment_date',
        'payment_type'                     => 'payment_type',
        'memo'                             => 'memo',
        'sending_status'                   => 'sending_status',
        'payment_status'                   => 'payment_status',
        'cancel_status'                    => 'cancel_status',
        'deal_status'                      => 'deal_status',
        'deal_id'                          => 'deal_id',
        'total_amount'                     => 'total_amount',
        'amount_withholding_tax'           => 'amount_withholding_tax',
        'amount_including_tax'             => 'amount_including_tax',
        'amount_excluding_tax'             => 'amount_excluding_tax',
        'amount_tax'                       => 'amount_tax',
        'amount_brought_forward'           => 'amount_brought_forward',
        'partner_id'                       => 'partner_id',
        'partner_code'                     => 'partner_code',
        'partner_name'                     => 'partner_name',
        'partner_display_name'             => 'partner_display_name',
        'company_contact_name'             => 'company_contact_name',
        'email_url_file_downloaded_at'     => 'email_url_file_downloaded_at',
        'email_url_file_downloaded_status' => 'email_url_file_downloaded_status',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'id'                               => 'setId',
        'company_id'                       => 'setCompanyId',
        'invoice_number'                   => 'setInvoiceNumber',
        'subject'                          => 'setSubject',
        'template_id'                      => 'setTemplateId',
        'billing_date'                     => 'setBillingDate',
        'issue_date'                       => 'setIssueDate',
        'payment_date'                     => 'setPaymentDate',
        'payment_type'                     => 'setPaymentType',
        'memo'                             => 'setMemo',
        'sending_status'                   => 'setSendingStatus',
        'payment_status'                   => 'setPaymentStatus',
        'cancel_status'                    => 'setCancelStatus',
        'deal_status'                      => 'setDealStatus',
        'deal_id'                          => 'setDealId',
        'total_amount'                     => 'setTotalAmount',
        'amount_withholding_tax'           => 'setAmountWithholdingTax',
        'amount_including_tax'             => 'setAmountIncludingTax',
        'amount_excluding_tax'             => 'setAmountExcludingTax',
        'amount_tax'                       => 'setAmountTax',
        'amount_brought_forward'           => 'setAmountBroughtForward',
        'partner_id'                       => 'setPartnerId',
        'partner_code'                     => 'setPartnerCode',
        'partner_name'                     => 'setPartnerName',
        'partner_display_name'             => 'setPartnerDisplayName',
        'company_contact_name'             => 'setCompanyContactName',
        'email_url_file_downloaded_at'     => 'setEmailUrlFileDownloadedAt',
        'email_url_file_downloaded_status' => 'setEmailUrlFileDownloadedStatus',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'id'                               => 'getId',
        'company_id'                       => 'getCompanyId',
        'invoice_number'                   => 'getInvoiceNumber',
        'subject'                          => 'getSubject',
        'template_id'                      => 'getTemplateId',
        'billing_date'                     => 'getBillingDate',
        'issue_date'                       => 'getIssueDate',
        'payment_date'                     => 'getPaymentDate',
        'payment_type'                     => 'getPaymentType',
        'memo'                             => 'getMemo',
        'sending_status'                   => 'getSendingStatus',
        'payment_status'                   => 'getPaymentStatus',
        'cancel_status'                    => 'getCancelStatus',
        'deal_status'                      => 'getDealStatus',
        'deal_id'                          => 'getDealId',
        'total_amount'                     => 'getTotalAmount',
        'amount_withholding_tax'           => 'getAmountWithholdingTax',
        'amount_including_tax'             => 'getAmountIncludingTax',
        'amount_excluding_tax'             => 'getAmountExcludingTax',
        'amount_tax'                       => 'getAmountTax',
        'amount_brought_forward'           => 'getAmountBroughtForward',
        'partner_id'                       => 'getPartnerId',
        'partner_code'                     => 'getPartnerCode',
        'partner_name'                     => 'getPartnerName',
        'partner_display_name'             => 'getPartnerDisplayName',
        'company_contact_name'             => 'getCompanyContactName',
        'email_url_file_downloaded_at'     => 'getEmailUrlFileDownloadedAt',
        'email_url_file_downloaded_status' => 'getEmailUrlFileDownloadedStatus',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAYMENT_TYPE_TRANSFER                         = 'transfer';
    const PAYMENT_TYPE_DIRECT_DEBIT                     = 'direct_debit';
    const SENDING_STATUS_SENT                           = 'sent';
    const SENDING_STATUS_UNSENT                         = 'unsent';
    const PAYMENT_STATUS_SETTLED                        = 'settled';
    const PAYMENT_STATUS_UNSETTLED                      = 'unsettled';
    const CANCEL_STATUS_CANCELED                        = 'canceled';
    const CANCEL_STATUS_UNCANCELED                      = 'uncanceled';
    const DEAL_STATUS_REGISTERED                        = 'registered';
    const DEAL_STATUS_UNREGISTERED                      = 'unregistered';
    const EMAIL_URL_FILE_DOWNLOADED_STATUS_DOWNLOADED   = 'downloaded';
    const EMAIL_URL_FILE_DOWNLOADED_STATUS_UNDOWNLOADED = 'undownloaded';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_TRANSFER,
            self::PAYMENT_TYPE_DIRECT_DEBIT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getSendingStatusAllowableValues()
    {
        return [
            self::SENDING_STATUS_SENT,
            self::SENDING_STATUS_UNSENT,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_SETTLED,
            self::PAYMENT_STATUS_UNSETTLED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getCancelStatusAllowableValues()
    {
        return [
            self::CANCEL_STATUS_CANCELED,
            self::CANCEL_STATUS_UNCANCELED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getDealStatusAllowableValues()
    {
        return [
            self::DEAL_STATUS_REGISTERED,
            self::DEAL_STATUS_UNREGISTERED,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getEmailUrlFileDownloadedStatusAllowableValues()
    {
        return [
            self::EMAIL_URL_FILE_DOWNLOADED_STATUS_DOWNLOADED,
            self::EMAIL_URL_FILE_DOWNLOADED_STATUS_UNDOWNLOADED,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id']                               = $data['id'] ?? null;
        $this->container['company_id']                       = $data['company_id'] ?? null;
        $this->container['invoice_number']                   = $data['invoice_number'] ?? null;
        $this->container['subject']                          = $data['subject'] ?? null;
        $this->container['template_id']                      = $data['template_id'] ?? null;
        $this->container['billing_date']                     = $data['billing_date'] ?? null;
        $this->container['issue_date']                       = $data['issue_date'] ?? null;
        $this->container['payment_date']                     = $data['payment_date'] ?? null;
        $this->container['payment_type']                     = $data['payment_type'] ?? null;
        $this->container['memo']                             = $data['memo'] ?? null;
        $this->container['sending_status']                   = $data['sending_status'] ?? null;
        $this->container['payment_status']                   = $data['payment_status'] ?? null;
        $this->container['cancel_status']                    = $data['cancel_status'] ?? null;
        $this->container['deal_status']                      = $data['deal_status'] ?? null;
        $this->container['deal_id']                          = $data['deal_id'] ?? null;
        $this->container['total_amount']                     = $data['total_amount'] ?? null;
        $this->container['amount_withholding_tax']           = $data['amount_withholding_tax'] ?? null;
        $this->container['amount_including_tax']             = $data['amount_including_tax'] ?? null;
        $this->container['amount_excluding_tax']             = $data['amount_excluding_tax'] ?? null;
        $this->container['amount_tax']                       = $data['amount_tax'] ?? null;
        $this->container['amount_brought_forward']           = $data['amount_brought_forward'] ?? null;
        $this->container['partner_id']                       = $data['partner_id'] ?? null;
        $this->container['partner_code']                     = $data['partner_code'] ?? null;
        $this->container['partner_name']                     = $data['partner_name'] ?? null;
        $this->container['partner_display_name']             = $data['partner_display_name'] ?? null;
        $this->container['company_contact_name']             = $data['company_contact_name'] ?? null;
        $this->container['email_url_file_downloaded_at']     = $data['email_url_file_downloaded_at'] ?? null;
        $this->container['email_url_file_downloaded_status'] = $data['email_url_file_downloaded_status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if (($this->container['company_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'company_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['company_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'company_id', must be bigger than or equal to 1.";
        }

        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ((mb_strlen($this->container['invoice_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ((mb_strlen($this->container['subject']) > 255)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['template_id']) && ($this->container['template_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'template_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['template_id']) && ($this->container['template_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'template_id', must be bigger than or equal to 1.";
        }

        if ($this->container['billing_date'] === null) {
            $invalidProperties[] = "'billing_date' can't be null";
        }
        if (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['billing_date'])) {
            $invalidProperties[] = "invalid value for 'billing_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (!is_null($this->container['issue_date']) && !preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['issue_date'])) {
            $invalidProperties[] = "invalid value for 'issue_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        if (!is_null($this->container['payment_date']) && !preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $this->container['payment_date'])) {
            $invalidProperties[] = "invalid value for 'payment_date', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.";
        }

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_type', must be one of '%s'",
                $this->container['payment_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['memo'] === null) {
            $invalidProperties[] = "'memo' can't be null";
        }
        if ((mb_strlen($this->container['memo']) > 2000)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be smaller than or equal to 2000.";
        }

        if ($this->container['sending_status'] === null) {
            $invalidProperties[] = "'sending_status' can't be null";
        }
        $allowedValues = $this->getSendingStatusAllowableValues();
        if (!is_null($this->container['sending_status']) && !in_array($this->container['sending_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sending_status', must be one of '%s'",
                $this->container['sending_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cancel_status'] === null) {
            $invalidProperties[] = "'cancel_status' can't be null";
        }
        $allowedValues = $this->getCancelStatusAllowableValues();
        if (!is_null($this->container['cancel_status']) && !in_array($this->container['cancel_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancel_status', must be one of '%s'",
                $this->container['cancel_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['deal_status'] === null) {
            $invalidProperties[] = "'deal_status' can't be null";
        }
        $allowedValues = $this->getDealStatusAllowableValues();
        if (!is_null($this->container['deal_status']) && !in_array($this->container['deal_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deal_status', must be one of '%s'",
                $this->container['deal_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['deal_id']) && ($this->container['deal_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'deal_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['deal_id']) && ($this->container['deal_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'deal_id', must be bigger than or equal to 1.";
        }

        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if ($this->container['amount_including_tax'] === null) {
            $invalidProperties[] = "'amount_including_tax' can't be null";
        }
        if ($this->container['amount_excluding_tax'] === null) {
            $invalidProperties[] = "'amount_excluding_tax' can't be null";
        }
        if ($this->container['amount_tax'] === null) {
            $invalidProperties[] = "'amount_tax' can't be null";
        }
        if ($this->container['amount_brought_forward'] === null) {
            $invalidProperties[] = "'amount_brought_forward' can't be null";
        }
        if (($this->container['amount_brought_forward'] > 999999999999)) {
            $invalidProperties[] = "invalid value for 'amount_brought_forward', must be smaller than or equal to 999999999999.";
        }

        if (($this->container['amount_brought_forward'] < -999999999999)) {
            $invalidProperties[] = "invalid value for 'amount_brought_forward', must be bigger than or equal to -999999999999.";
        }

        if ($this->container['partner_id'] === null) {
            $invalidProperties[] = "'partner_id' can't be null";
        }
        if (($this->container['partner_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'partner_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['partner_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'partner_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['partner_name']) && (mb_strlen($this->container['partner_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['partner_display_name']) && (mb_strlen($this->container['partner_display_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'partner_display_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_contact_name']) && (mb_strlen($this->container['company_contact_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_contact_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email_url_file_downloaded_at']) && !preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/', $this->container['email_url_file_downloaded_at'])) {
            $invalidProperties[] = "invalid value for 'email_url_file_downloaded_at', must be conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/.";
        }

        $allowedValues = $this->getEmailUrlFileDownloadedStatusAllowableValues();
        if (!is_null($this->container['email_url_file_downloaded_status']) && !in_array($this->container['email_url_file_downloaded_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'email_url_file_downloaded_status', must be one of '%s'",
                $this->container['email_url_file_downloaded_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id.
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param int $id 請求書ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 9223372036854775807.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling InvoiceIndexResponseInvoices., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id.
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id.
     *
     * @param int $company_id 事業所ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {

        if (($company_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 9223372036854775807.');
        }
        if (($company_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling InvoiceIndexResponseInvoices., must be bigger than or equal to 1.');
        }

        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets invoice_number.
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number.
     *
     * @param string $invoice_number 請求書番号
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if ((mb_strlen($invoice_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 255.');
        }

        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets subject.
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject.
     *
     * @param string $subject 件名
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if ((mb_strlen($subject) > 255)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 255.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets template_id.
     *
     * @return int|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id.
     *
     * @param int|null $template_id 帳票テンプレートID
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {

        if (!is_null($template_id) && ($template_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($template_id) && ($template_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling InvoiceIndexResponseInvoices., must be bigger than or equal to 1.');
        }

        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets billing_date.
     *
     * @return \DateTime
     */
    public function getBillingDate()
    {
        return $this->container['billing_date'];
    }

    /**
     * Sets billing_date.
     *
     * @param \DateTime $billing_date 請求日
     *
     * @return self
     */
    public function setBillingDate($billing_date)
    {

        if ((!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $billing_date))) {
            throw new \InvalidArgumentException("invalid value for $billing_date when calling InvoiceIndexResponseInvoices., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['billing_date'] = $billing_date;

        return $this;
    }

    /**
     * Gets issue_date.
     *
     * @return \DateTime|null
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date.
     *
     * @param \DateTime|null $issue_date 発生日
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {

        if (!is_null($issue_date) && (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $issue_date))) {
            throw new \InvalidArgumentException("invalid value for $issue_date when calling InvoiceIndexResponseInvoices., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets payment_date.
     *
     * @return \DateTime|null
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date.
     *
     * @param \DateTime|null $payment_date 期日 - payment_typeがtransferの場合、入金期日に該当します。 - payment_typeがdirect_debitの場合、振替日に該当します。
     *
     * @return self
     */
    public function setPaymentDate($payment_date)
    {

        if (!is_null($payment_date) && (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $payment_date))) {
            throw new \InvalidArgumentException("invalid value for $payment_date when calling InvoiceIndexResponseInvoices., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.");
        }

        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets payment_type.
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type.
     *
     * @param string|null $payment_type 入金方法 (振込: transfer, 振替: direct_debit)
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($payment_type) && !in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_type', must be one of '%s'",
                    $payment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets memo.
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo.
     *
     * @param string $memo 社内メモ
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if ((mb_strlen($memo) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 2000.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets sending_status.
     *
     * @return string
     */
    public function getSendingStatus()
    {
        return $this->container['sending_status'];
    }

    /**
     * Sets sending_status.
     *
     * @param string $sending_status 送付ステータス（sent: 送付済み、 unsent: 送付待ち）
     *
     * @return self
     */
    public function setSendingStatus($sending_status)
    {
        $allowedValues = $this->getSendingStatusAllowableValues();
        if (!in_array($sending_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sending_status', must be one of '%s'",
                    $sending_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sending_status'] = $sending_status;

        return $this;
    }

    /**
     * Gets payment_status.
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status.
     *
     * @param string $payment_status 入金ステータス（unsettled: 入金待ち, settled: 入金済み）
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets cancel_status.
     *
     * @return string
     */
    public function getCancelStatus()
    {
        return $this->container['cancel_status'];
    }

    /**
     * Sets cancel_status.
     *
     * @param string $cancel_status 取消済み（canceled: 該当する、 uncanceled: 該当しない）
     *
     * @return self
     */
    public function setCancelStatus($cancel_status)
    {
        $allowedValues = $this->getCancelStatusAllowableValues();
        if (!in_array($cancel_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancel_status', must be one of '%s'",
                    $cancel_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancel_status'] = $cancel_status;

        return $this;
    }

    /**
     * Gets deal_status.
     *
     * @return string
     */
    public function getDealStatus()
    {
        return $this->container['deal_status'];
    }

    /**
     * Sets deal_status.
     *
     * @param string $deal_status 取引ステータス（registered: 登録済み、 unregistered: 登録待ち）
     *
     * @return self
     */
    public function setDealStatus($deal_status)
    {
        $allowedValues = $this->getDealStatusAllowableValues();
        if (!in_array($deal_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deal_status', must be one of '%s'",
                    $deal_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deal_status'] = $deal_status;

        return $this;
    }

    /**
     * Gets deal_id.
     *
     * @return int|null
     */
    public function getDealId()
    {
        return $this->container['deal_id'];
    }

    /**
     * Sets deal_id.
     *
     * @param int|null $deal_id 取引ID （deal_statusがunregisteredの場合、nullになります。）
     *
     * @return self
     */
    public function setDealId($deal_id)
    {

        if (!is_null($deal_id) && ($deal_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $deal_id when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($deal_id) && ($deal_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $deal_id when calling InvoiceIndexResponseInvoices., must be bigger than or equal to 1.');
        }

        $this->container['deal_id'] = $deal_id;

        return $this;
    }

    /**
     * Gets total_amount.
     *
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount.
     *
     * @param float $total_amount 合計金額
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets amount_withholding_tax.
     *
     * @return float|null
     */
    public function getAmountWithholdingTax()
    {
        return $this->container['amount_withholding_tax'];
    }

    /**
     * Sets amount_withholding_tax.
     *
     * @param float|null $amount_withholding_tax 源泉所得税
     *
     * @return self
     */
    public function setAmountWithholdingTax($amount_withholding_tax)
    {
        $this->container['amount_withholding_tax'] = $amount_withholding_tax;

        return $this;
    }

    /**
     * Gets amount_including_tax.
     *
     * @return float
     */
    public function getAmountIncludingTax()
    {
        return $this->container['amount_including_tax'];
    }

    /**
     * Sets amount_including_tax.
     *
     * @param float $amount_including_tax 税込金額
     *
     * @return self
     */
    public function setAmountIncludingTax($amount_including_tax)
    {
        $this->container['amount_including_tax'] = $amount_including_tax;

        return $this;
    }

    /**
     * Gets amount_excluding_tax.
     *
     * @return float
     */
    public function getAmountExcludingTax()
    {
        return $this->container['amount_excluding_tax'];
    }

    /**
     * Sets amount_excluding_tax.
     *
     * @param float $amount_excluding_tax 小計（税別）
     *
     * @return self
     */
    public function setAmountExcludingTax($amount_excluding_tax)
    {
        $this->container['amount_excluding_tax'] = $amount_excluding_tax;

        return $this;
    }

    /**
     * Gets amount_tax.
     *
     * @return float
     */
    public function getAmountTax()
    {
        return $this->container['amount_tax'];
    }

    /**
     * Sets amount_tax.
     *
     * @param float $amount_tax 消費税額
     *
     * @return self
     */
    public function setAmountTax($amount_tax)
    {
        $this->container['amount_tax'] = $amount_tax;

        return $this;
    }

    /**
     * Gets amount_brought_forward.
     *
     * @return float
     */
    public function getAmountBroughtForward()
    {
        return $this->container['amount_brought_forward'];
    }

    /**
     * Sets amount_brought_forward.
     *
     * @param float $amount_brought_forward 繰越金額
     *
     * @return self
     */
    public function setAmountBroughtForward($amount_brought_forward)
    {

        if (($amount_brought_forward > 999999999999)) {
            throw new \InvalidArgumentException('invalid value for $amount_brought_forward when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 999999999999.');
        }
        if (($amount_brought_forward < -999999999999)) {
            throw new \InvalidArgumentException('invalid value for $amount_brought_forward when calling InvoiceIndexResponseInvoices., must be bigger than or equal to -999999999999.');
        }

        $this->container['amount_brought_forward'] = $amount_brought_forward;

        return $this;
    }

    /**
     * Gets partner_id.
     *
     * @return int
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id.
     *
     * @param int $partner_id 取引先ID
     *
     * @return self
     */
    public function setPartnerId($partner_id)
    {

        if (($partner_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $partner_id when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 9223372036854775807.');
        }
        if (($partner_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $partner_id when calling InvoiceIndexResponseInvoices., must be bigger than or equal to 1.');
        }

        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets partner_code.
     *
     * @return string|null
     */
    public function getPartnerCode()
    {
        return $this->container['partner_code'];
    }

    /**
     * Sets partner_code.
     *
     * @param string|null $partner_code 取引先コード
     *
     * @return self
     */
    public function setPartnerCode($partner_code)
    {
        $this->container['partner_code'] = $partner_code;

        return $this;
    }

    /**
     * Gets partner_name.
     *
     * @return string|null
     */
    public function getPartnerName()
    {
        return $this->container['partner_name'];
    }

    /**
     * Sets partner_name.
     *
     * @param string|null $partner_name 取引先名 - partner_nameに空文字が戻る場合は、対象レコードをweb画面から更新するか、freee請求書APIから更新すると解消されます。
     *
     * @return self
     */
    public function setPartnerName($partner_name)
    {
        if (!is_null($partner_name) && (mb_strlen($partner_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_name when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 255.');
        }

        $this->container['partner_name'] = $partner_name;

        return $this;
    }

    /**
     * Gets partner_display_name.
     *
     * @return string|null
     */
    public function getPartnerDisplayName()
    {
        return $this->container['partner_display_name'];
    }

    /**
     * Sets partner_display_name.
     *
     * @param string|null $partner_display_name 取引先宛名 - 帳票の宛名に利用されます。
     *
     * @return self
     */
    public function setPartnerDisplayName($partner_display_name)
    {
        if (!is_null($partner_display_name) && (mb_strlen($partner_display_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $partner_display_name when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 255.');
        }

        $this->container['partner_display_name'] = $partner_display_name;

        return $this;
    }

    /**
     * Gets company_contact_name.
     *
     * @return string|null
     */
    public function getCompanyContactName()
    {
        return $this->container['company_contact_name'];
    }

    /**
     * Sets company_contact_name.
     *
     * @param string|null $company_contact_name 自社担当者 (デフォルト: 表示ユーザー名)
     *
     * @return self
     */
    public function setCompanyContactName($company_contact_name)
    {
        if (!is_null($company_contact_name) && (mb_strlen($company_contact_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_contact_name when calling InvoiceIndexResponseInvoices., must be smaller than or equal to 255.');
        }

        $this->container['company_contact_name'] = $company_contact_name;

        return $this;
    }

    /**
     * Gets email_url_file_downloaded_at.
     *
     * @return string|null
     */
    public function getEmailUrlFileDownloadedAt()
    {
        return $this->container['email_url_file_downloaded_at'];
    }

    /**
     * Sets email_url_file_downloaded_at.
     *
     * @param string|null $email_url_file_downloaded_at URL共有で送付された送付先のメールのダウンロード時刻
     *
     * @return self
     */
    public function setEmailUrlFileDownloadedAt($email_url_file_downloaded_at)
    {

        if (!is_null($email_url_file_downloaded_at) && (!preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/', $email_url_file_downloaded_at))) {
            throw new \InvalidArgumentException("invalid value for $email_url_file_downloaded_at when calling InvoiceIndexResponseInvoices., must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}(:[0-9]{2})?$/.");
        }

        $this->container['email_url_file_downloaded_at'] = $email_url_file_downloaded_at;

        return $this;
    }

    /**
     * Gets email_url_file_downloaded_status.
     *
     * @return string|null
     */
    public function getEmailUrlFileDownloadedStatus()
    {
        return $this->container['email_url_file_downloaded_status'];
    }

    /**
     * Sets email_url_file_downloaded_status.
     *
     * @param string|null $email_url_file_downloaded_status URL共有で送付された送付先のメールのダウンロードステータス
     *
     * @return self
     */
    public function setEmailUrlFileDownloadedStatus($email_url_file_downloaded_status)
    {
        $allowedValues = $this->getEmailUrlFileDownloadedStatusAllowableValues();
        if (!is_null($email_url_file_downloaded_status) && !in_array($email_url_file_downloaded_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'email_url_file_downloaded_status', must be one of '%s'",
                    $email_url_file_downloaded_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_url_file_downloaded_status'] = $email_url_file_downloaded_status;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
